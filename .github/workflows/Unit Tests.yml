name: Unit Tests
on: [push, pull_request]

jobs:
  # This workflow contains a single job called "build"
  UnitTests:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Only when run from the main repo
    if: github.repository == 'microsoft/Microsoft365DSC'

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Modules
        shell: pwsh
        run: |
          $Manifest = Import-PowerShellDataFile './Modules/Microsoft365DSC/Dependencies/Manifest.psd1'

          foreach ($module in $Manifest.Dependencies)
          {
            Write-Verbose -Message "Installing module: $($module.ModuleName)"
            if ($module.AllowPreRelease)
            {
              try
              {
                  Install-Module $module.ModuleName -AllowPreRelease -Force -Scope AllUsers
              }
              catch
              {}
            }
            else
            {
              try
              {
                Install-Module $module.ModuleName -RequiredVersion $module.RequiredVersion -Force -Scope AllUsers
              }
              catch
              {}
            }
          }
          Install-Module PSDesiredStateConfiguration -Force -Scope AllUsers
          Install-Module Pester -Force -SkipPublisherCheck -RequiredVersion 5.4.0 -Scope AllUsers
          [System.Environment]::SetEnvironmentVariable('M365DSCTelemetryEnabled', $false, [System.EnvironmentVariableTarget]::Machine);
      - name: Run Quality Checks
        shell: pwsh
        run: |
          Import-Module './Tests/TestHarness.psm1' -Force;
          $MaximumFunctionCount = 9999

          try
          {
              $results = Invoke-QualityChecksHarness
          }
          catch
          {
              $MaximumFunctionCount = 9999
              Import-Module './Tests/TestHarness.psm1' -Force;
              $results = Invoke-QualityChecksHarness
          }
          if ($results.FailedCount -gt 0)
          {
              throw "{$($results.FailedCount)} Quality Check(s) Failed"
          }
      - name: Run Test Harness
        shell: pwsh
        run: |
          Import-Module './Tests/TestHarness.psm1' -Force;
          $MaximumFunctionCount = 9999

          try
          {
              $results = Invoke-TestHarness -IgnoreCodeCoverage
          }
          catch
          {
              $MaximumFunctionCount = 9999
              Import-Module './Tests/TestHarness.psm1' -Force;
              $results = Invoke-TestHarness -IgnoreCodeCoverage
          }
          if ($results.FailedCount -gt 0)
          {
              throw "{$($results.FailedCount)} Unit Test(s) Failed"
          }
