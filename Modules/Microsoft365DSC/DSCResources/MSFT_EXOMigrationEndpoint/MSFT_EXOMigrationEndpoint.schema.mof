[ClassVersion("1.0.0.0"), FriendlyName("EXOMigrationEndpoint")]
class MSFT_EXOMigrationEndpoint : OMI_BaseResource
{
    [Key, Description("Identity of the migration endpoint.")] String Identity;
    [Write, Description("Specifies whether to accept untrusted certificates.")] Boolean AcceptUntrustedCertificates;
    [Write, Description("The Application ID used for authentication.")] String AppID;
    [Write, Description("The URL of the Key Vault that stores the application secret.")] String AppSecretKeyVaultUrl;
    [Write, Description("The authentication method for the migration endpoint.")] String Authentication;
    [Write, Description("The type of migration endpoint."), ValueMap{"IMAP"}, Values{"IMAP"}] String EndpointType;
    [Write, Description("The Exchange Server address for the migration endpoint.")] String ExchangeServer;
    [Write, Description("The mailbox permission for the migration endpoint.")] String MailboxPermission;
    [Write, Description("The maximum number of concurrent incremental syncs.")] String MaxConcurrentIncrementalSyncs;
    [Write, Description("The maximum number of concurrent migrations.")] String MaxConcurrentMigrations;
    [Write, Description("The NSPI server for the migration endpoint.")] String NspiServer;
    [Write, Description("The port number for the migration endpoint.")] String Port;
    [Write, Description("The remote server for the migration endpoint.")] String RemoteServer;
    [Write, Description("The remote tenant for the migration endpoint.")] String RemoteTenant;
    [Write, Description("The RPC proxy server for the migration endpoint.")] String RpcProxyServer;
    [Write, Description("The security level for the migration endpoint."), ValueMap{"None", "Tls", "Ssl"}, Values{"None", "Tls", "Ssl"}] String Security;
    [Write, Description("The legacy distinguished name of the source mailbox.")] String SourceMailboxLegacyDN;
    [Write, Description("Specifies whether to use AutoDiscover.")] Boolean UseAutoDiscover;

    [Write, Description("Specifies if the migration endpoint should exist or not."), ValueMap{"Present","Absent"}, Values{"Present","Absent"}] String Ensure;
    [Write, Description("Credentials of the workload's Admin"), EmbeddedInstance("MSFT_Credential")] string Credential;
    [Write, Description("Id of the Azure Active Directory application to authenticate with.")] String ApplicationId;
    [Write, Description("Id of the Azure Active Directory tenant used for authentication.")] String TenantId;
    [Write, Description("Thumbprint of the Azure Active Directory application's authentication certificate to use for authentication.")] String CertificateThumbprint;
    [Write, Description("Managed ID being used for authentication.")] Boolean ManagedIdentity;
    [Write, Description("Access token used for authentication.")] String AccessTokens[];
};
