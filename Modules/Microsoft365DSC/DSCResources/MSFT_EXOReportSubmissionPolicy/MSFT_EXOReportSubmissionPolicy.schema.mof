
[ClassVersion("1.0.0.0"), FriendlyName("EXOReportSubmissionPolicy")]
class MSFT_EXOReportSubmissionPolicy : OMI_BaseResource
{
    [Key, Description("Specifies the resource is a single instance, the value must be 'Yes'."), ValueMap{"Yes"}, Values{"Yes"}] String IsSingleInstance;
    [Write, Description("The DisableQuarantineReportingOption parameter allows or prevents users from reporting messages in quarantine.")] Boolean DisableQuarantineReportingOption;
    [Write, Description("The EnableCustomNotificationSender parameter specifies whether a custom sender email address is used for result messages after an admin reviews and marks the reported messages as junk, not junk, or phishing.")] Boolean EnableCustomNotificationSender;
    [Write, Description("The EnableOrganizationBranding parameter specifies whether to show the company logo in the footer of result messages that users receive after an admin reviews and marks the reported messages as junk, not junk, or phishing.")] Boolean EnableOrganizationBranding;
    [Write, Description("The EnableReportToMicrosoft parameter specifies whether Microsoft integrated reporting experience is enabled or disabled.")] Boolean EnableReportToMicrosoft;
    [Write, Description("The EnableThirdPartyAddress parameter specifies whether you're using third-party reporting tools in Outlook instead of Microsoft tools to send messages to the reporting mailbox in Exchange Online.")] Boolean EnableThirdPartyAddress;
    [Write, Description("The EnableUserEmailNotification parameter species whether users receive result messages after an admin reviews and marks the reported messages as junk, not junk, or phishing.")] Boolean EnableUserEmailNotification;
    [Write, Description("The JunkReviewResultMessage parameter specifies the custom text to use in result messages after an admin reviews and marks the reported messages as junk.")] String JunkReviewResultMessage;
    [Write, Description("The NotJunkReviewResultMessage parameter specifies the custom text to use in result messages after an admin reviews and marks the reported messages as not junk.")] String NotJunkReviewResultMessage;
    [Write, Description("The NotificationFooterMessage parameter specifies the custom footer text to use in email notifications after an admin reviews and marks the reported messages as junk, not junk, or phishing.")] String NotificationFooterMessage;
    [Write, Description("The NotificationSenderAddress parameter specifies the sender email address to use in result messages after an admin reviews and marks the reported messages as junk, not junk, or phishing.")] String NotificationSenderAddress;
    [Write, Description("The PhishingReviewResultMessage parameter specifies the custom text to use in result messages after an admin reviews and marks the reported messages as phishing.")] String PhishingReviewResultMessage;
    [Write, Description("The PostSubmitMessage parameter specifies the custom pop-up message text to use in Outlook notifications after users report messages.")] String PostSubmitMessage;
    [Write, Description("The PostSubmitMessageEnabled parameter enables or disables the pop-up Outlook notifications that users see after they report messages using Microsoft reporting tools.")] Boolean PostSubmitMessageEnabled;
    [Write, Description("The PostSubmitMessage parameter parameter specifies the custom pop-up message title to use in Outlook notifications after users report messages.")] String PostSubmitMessageTitle;
    [Write, Description("The PreSubmitMessage parameter specifies the custom pop-up message text to use in Outlook notifications before users report messages. ")] String PreSubmitMessage;
    [Write, Description("The PreSubmitMessageEnabled parameter enables or disables the pop-up Outlook notifications that users see before they report messages using Microsoft reporting tools.")] Boolean PreSubmitMessageEnabled;
    [Write, Description("The PreSubmitMessage parameter parameter specifies the custom pop-up message title to use in Outlook notifications before users report messages.")] String PreSubmitMessageTitle;
    [Write, Description("The ReportJunkAddresses parameter specifies the email address of the reporting mailbox in Exchange Online to receive user reported messages in reporting in Outlook using Microsoft or third-party reporting tools in Outlook.")] String ReportJunkAddresses[];
    [Write, Description("The ReportJunkToCustomizedAddress parameter specifies whether to send user reported messages from Outlook (using Microsoft or third-party reporting tools) to the reporting mailbox as part of reporting in Outlook. ")] Boolean ReportJunkToCustomizedAddress;
    [Write, Description("The ReportNotJunkAddresses parameter specifies the email address of the reporting mailbox in Exchange Online to receive user reported messages in reporting in Outlook using Microsoft or third-party reporting tools in Outlook.")] String ReportNotJunkAddresses[];
    [Write, Description("The ReportNotJunkToCustomizedAddress parameter specifies whether to send user reported messages from Outlook (using Microsoft or third-party reporting tools) to the reporting mailbox as part of reporting in Outlook.")] Boolean ReportNotJunkToCustomizedAddress;
    [Write, Description("The ReportPhishAddresses parameter specifies the email address of the reporting mailbox in Exchange Online to receive user reported messages in reporting in Outlook using Microsoft or third-party reporting tools in Outlook.")] String ReportPhishAddresses[];
    [Write, Description("The ReportPhishToCustomizedAddress parameter specifies whether to send user reported messages from Outlook (using Microsoft or third-party reporting tools) to the reporting mailbox as part of reporting in Outlook.")] Boolean ReportPhishToCustomizedAddress;
    [Write, Description("Use the ThirdPartyReportAddresses parameter to specify the email address of the reporting mailbox when you're using a third-party product for user submissions instead of reporting in Outlook.")] String ThirdPartyReportAddresses[];
    [Write, Description("Specifies if this report submission policy should exist."), ValueMap{"Present","Absent"}, Values{"Present","Absent"}] String Ensure;
    [Write, Description("Credentials of the Exchange Global Admin"), EmbeddedInstance("MSFT_Credential")] string Credential;
    [Write, Description("Id of the Azure Active Directory application to authenticate with.")] String ApplicationId;
    [Write, Description("Id of the Azure Active Directory tenant used for authentication.")] String TenantId;
    [Write, Description("Thumbprint of the Azure Active Directory application's authentication certificate to use for authentication.")] String CertificateThumbprint;
    [Write, Description("Username can be made up to anything but password will be used for CertificatePassword"), EmbeddedInstance("MSFT_Credential")] String CertificatePassword;
    [Write, Description("Path to certificate used in service principal usually a PFX file.")] String CertificatePath;
    [Write, Description("Managed ID being used for authentication.")] Boolean ManagedIdentity;
};
