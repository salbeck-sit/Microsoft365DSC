[ClassVersion("1.0.0.0")]
class MSFT_DeviceManagementConfigurationPolicyAssignments
{
    [Write, Description("The type of the target assignment."), ValueMap{"#microsoft.graph.groupAssignmentTarget","#microsoft.graph.allLicensedUsersAssignmentTarget","#microsoft.graph.allDevicesAssignmentTarget","#microsoft.graph.exclusionGroupAssignmentTarget","#microsoft.graph.configurationManagerCollectionAssignmentTarget"}, Values{"#microsoft.graph.groupAssignmentTarget","#microsoft.graph.allLicensedUsersAssignmentTarget","#microsoft.graph.allDevicesAssignmentTarget","#microsoft.graph.exclusionGroupAssignmentTarget","#microsoft.graph.configurationManagerCollectionAssignmentTarget"}] String dataType;
    [Write, Description("The type of filter of the target assignment i.e. Exclude or Include. Possible values are:none, include, exclude."), ValueMap{"none","include","exclude"}, Values{"none","include","exclude"}] String deviceAndAppManagementAssignmentFilterType;
    [Write, Description("The Id of the filter for the target assignment.")] String deviceAndAppManagementAssignmentFilterId;
    [Write, Description("The group Id that is the target of the assignment.")] String groupId;
    [Write, Description("The group Display Name that is the target of the assignment.")] String groupDisplayName;
    [Write, Description("The collection Id that is the target of the assignment.(ConfigMgr)")] String collectionId;
};
[ClassVersion("1.0.0")]
class MSFT_MicrosoftGraphWindowsKioskProfile
{
    [Write, Description("The App configuration that will be used for this kiosk configuration."), EmbeddedInstance("MSFT_MicrosoftGraphWindowsKioskAppConfiguration")] String AppConfiguration;
    [Write, Description("Key of the entity.")] String ProfileId;
    [Write, Description("This is a friendly nameused to identify a group of applications, the layout of these apps on the start menu and the users to whom this kiosk configuration is assigned.")] String ProfileName;
    [Write, Description("The user accounts that will be locked to this kiosk configuration. This collection can contain a maximum of 100 elements."), EmbeddedInstance("MSFT_MicrosoftGraphWindowsKioskUser")] String UserAccountsConfiguration[];
};
[ClassVersion("1.0.0")]
class MSFT_MicrosoftGraphWindowsKioskAppConfiguration
{
    [Write, Description("This setting allows access to Downloads folder in file explorer.")] Boolean AllowAccessToDownloadsFolder;
    [Write, Description("These are the only Windows Store Apps that will be available to launch from the Start menu. This collection can contain a maximum of 128 elements."), EmbeddedInstance("MSFT_MicrosoftGraphWindowsKioskAppBase")] String Apps[];
    [Write, Description("This setting indicates that desktop apps are allowed. Default to true.")] Boolean DisallowDesktopApps;
    [Write, Description("This setting allows the admin to specify whether the Task Bar is shown or not.")] Boolean ShowTaskBar;
    [Write, Description("Allows admins to override the default Start layout and prevents the user from changing it.The layout is modified by specifying an XML file based on a layout modification schema. XML needs to be in Binary format.")] String StartMenuLayoutXml;
    [Write, Description("This is the only Application User Model ID (AUMID) that will be available to launch use while in Kiosk Mode"), EmbeddedInstance("MSFT_MicrosoftGraphWindowsKioskUWPApp")] String UwpApp;
    [Write, Description("This is the win32 app that will be available to launch use while in Kiosk Mode"), EmbeddedInstance("MSFT_MicrosoftGraphWindowsKioskWin32App")] String Win32App;
    [Write, Description("The type of the entity."), ValueMap{"#microsoft.graph.windowsKioskMultipleApps","#microsoft.graph.windowsKioskSingleUWPApp","#microsoft.graph.windowsKioskSingleWin32App"}, Values{"#microsoft.graph.windowsKioskMultipleApps","#microsoft.graph.windowsKioskSingleUWPApp","#microsoft.graph.windowsKioskSingleWin32App"}] String odataType;
};
[ClassVersion("1.0.0")]
class MSFT_MicrosoftGraphWindowsKioskAppBase
{
    [Write, Description("The app type. Possible values are: unknown, store, desktop, aumId."), ValueMap{"unknown","store","desktop","aumId"}, Values{"unknown","store","desktop","aumId"}] String AppType;
    [Write, Description("Allow the app to be auto-launched in multi-app kiosk mode")] Boolean AutoLaunch;
    [Write, Description("Represents the friendly name of an app")] String Name;
    [Write, Description("The app tile size for the start layout. Possible values are: hidden, small, medium, wide, large."), ValueMap{"hidden","small","medium","wide","large"}, Values{"hidden","small","medium","wide","large"}] String StartLayoutTileSize;
    [Write, Description("Define the DesktopApplicationID of the app")] String DesktopApplicationId;
    [Write, Description("Define the DesktopApplicationLinkPath of the app")] String DesktopApplicationLinkPath;
    [Write, Description("Define the path of a desktop app")] String Path;
    [Write, Description("This references an Intune App that will be target to the same assignments as Kiosk configuration")] String AppId;
    [Write, Description("This is the only Application User Model ID (AUMID) that will be available to launch use while in Kiosk Mode")] String AppUserModelId;
    [Write, Description("This references an contained App from an Intune App")] String ContainedAppId;
    [Write, Description("This is the classicapppath to be used by v4 Win32 app while in Kiosk Mode")] String ClassicAppPath;
    [Write, Description("Edge kiosk (url) for Edge kiosk mode")] String EdgeKiosk;
    [Write, Description("Edge kiosk idle timeout in minutes for Edge kiosk mode. Valid values 0 to 1440")] UInt32 EdgeKioskIdleTimeoutMinutes;
    [Write, Description("Edge kiosk type for Edge kiosk mode. Possible values are: publicBrowsing, fullScreen."), ValueMap{"publicBrowsing","fullScreen"}, Values{"publicBrowsing","fullScreen"}] String EdgeKioskType;
    [Write, Description("Edge first run flag for Edge kiosk mode")] Boolean EdgeNoFirstRun;
    [Write, Description("The type of the entity."), ValueMap{"#microsoft.graph.windowsKioskDesktopApp","#microsoft.graph.windowsKioskUWPApp","#microsoft.graph.windowsKioskWin32App"}, Values{"#microsoft.graph.windowsKioskDesktopApp","#microsoft.graph.windowsKioskUWPApp","#microsoft.graph.windowsKioskWin32App"}] String odataType;
};
[ClassVersion("1.0.0")]
class MSFT_MicrosoftGraphWindowsKioskUWPApp
{
    [Write, Description("This references an Intune App that will be target to the same assignments as Kiosk configuration")] String AppId;
    [Write, Description("This is the only Application User Model ID (AUMID) that will be available to launch use while in Kiosk Mode")] String AppUserModelId;
    [Write, Description("This references an contained App from an Intune App")] String ContainedAppId;
    [Write, Description("The app type. Possible values are: unknown, store, desktop, aumId."), ValueMap{"unknown","store","desktop","aumId"}, Values{"unknown","store","desktop","aumId"}] String AppType;
    [Write, Description("Allow the app to be auto-launched in multi-app kiosk mode")] Boolean AutoLaunch;
    [Write, Description("Represents the friendly name of an app")] String Name;
    [Write, Description("The app tile size for the start layout. Possible values are: hidden, small, medium, wide, large."), ValueMap{"hidden","small","medium","wide","large"}, Values{"hidden","small","medium","wide","large"}] String StartLayoutTileSize;
    [Write, Description("Define the DesktopApplicationID of the app")] String DesktopApplicationId;
    [Write, Description("Define the DesktopApplicationLinkPath of the app")] String DesktopApplicationLinkPath;
    [Write, Description("Define the path of a desktop app")] String Path;
    [Write, Description("This is the classicapppath to be used by v4 Win32 app while in Kiosk Mode")] String ClassicAppPath;
    [Write, Description("Edge kiosk (url) for Edge kiosk mode")] String EdgeKiosk;
    [Write, Description("Edge kiosk idle timeout in minutes for Edge kiosk mode. Valid values 0 to 1440")] UInt32 EdgeKioskIdleTimeoutMinutes;
    [Write, Description("Edge kiosk type for Edge kiosk mode. Possible values are: publicBrowsing, fullScreen."), ValueMap{"publicBrowsing","fullScreen"}, Values{"publicBrowsing","fullScreen"}] String EdgeKioskType;
    [Write, Description("Edge first run flag for Edge kiosk mode")] Boolean EdgeNoFirstRun;
    [Write, Description("The type of the entity."), ValueMap{"#microsoft.graph.windowsKioskDesktopApp","#microsoft.graph.windowsKioskUWPApp","#microsoft.graph.windowsKioskWin32App"}, Values{"#microsoft.graph.windowsKioskDesktopApp","#microsoft.graph.windowsKioskUWPApp","#microsoft.graph.windowsKioskWin32App"}] String odataType;
};
[ClassVersion("1.0.0")]
class MSFT_MicrosoftGraphWindowsKioskWin32App
{
    [Write, Description("This is the classicapppath to be used by v4 Win32 app while in Kiosk Mode")] String ClassicAppPath;
    [Write, Description("Edge kiosk (url) for Edge kiosk mode")] String EdgeKiosk;
    [Write, Description("Edge kiosk idle timeout in minutes for Edge kiosk mode. Valid values 0 to 1440")] UInt32 EdgeKioskIdleTimeoutMinutes;
    [Write, Description("Edge kiosk type for Edge kiosk mode. Possible values are: publicBrowsing, fullScreen."), ValueMap{"publicBrowsing","fullScreen"}, Values{"publicBrowsing","fullScreen"}] String EdgeKioskType;
    [Write, Description("Edge first run flag for Edge kiosk mode")] Boolean EdgeNoFirstRun;
    [Write, Description("The app type. Possible values are: unknown, store, desktop, aumId."), ValueMap{"unknown","store","desktop","aumId"}, Values{"unknown","store","desktop","aumId"}] String AppType;
    [Write, Description("Allow the app to be auto-launched in multi-app kiosk mode")] Boolean AutoLaunch;
    [Write, Description("Represents the friendly name of an app")] String Name;
    [Write, Description("The app tile size for the start layout. Possible values are: hidden, small, medium, wide, large."), ValueMap{"hidden","small","medium","wide","large"}, Values{"hidden","small","medium","wide","large"}] String StartLayoutTileSize;
    [Write, Description("Define the DesktopApplicationID of the app")] String DesktopApplicationId;
    [Write, Description("Define the DesktopApplicationLinkPath of the app")] String DesktopApplicationLinkPath;
    [Write, Description("Define the path of a desktop app")] String Path;
    [Write, Description("This references an Intune App that will be target to the same assignments as Kiosk configuration")] String AppId;
    [Write, Description("This is the only Application User Model ID (AUMID) that will be available to launch use while in Kiosk Mode")] String AppUserModelId;
    [Write, Description("This references an contained App from an Intune App")] String ContainedAppId;
    [Write, Description("The type of the entity."), ValueMap{"#microsoft.graph.windowsKioskDesktopApp","#microsoft.graph.windowsKioskUWPApp","#microsoft.graph.windowsKioskWin32App"}, Values{"#microsoft.graph.windowsKioskDesktopApp","#microsoft.graph.windowsKioskUWPApp","#microsoft.graph.windowsKioskWin32App"}] String odataType;
};
[ClassVersion("1.0.0")]
class MSFT_MicrosoftGraphWindowsKioskUser
{
    [Write, Description("The name of the AD group that will be locked to this kiosk configuration")] String GroupName;
    [Write, Description("The display name of the AzureAD group that will be locked to this kiosk configuration")] String DisplayName;
    [Write, Description("The ID of the AzureAD group that will be locked to this kiosk configuration")] String GroupId;
    [Write, Description("The ID of the AzureAD user that will be locked to this kiosk configuration")] String UserId;
    [Write, Description("The user accounts that will be locked to this kiosk configuration")] String UserPrincipalName;
    [Write, Description("The local user that will be locked to this kiosk configuration")] String UserName;
    [Write, Description("The type of the entity."), ValueMap{"#microsoft.graph.windowsKioskActiveDirectoryGroup","#microsoft.graph.windowsKioskAutologon","#microsoft.graph.windowsKioskAzureADGroup","#microsoft.graph.windowsKioskAzureADUser","#microsoft.graph.windowsKioskLocalGroup","#microsoft.graph.windowsKioskLocalUser","#microsoft.graph.windowsKioskVisitor"}, Values{"#microsoft.graph.windowsKioskActiveDirectoryGroup","#microsoft.graph.windowsKioskAutologon","#microsoft.graph.windowsKioskAzureADGroup","#microsoft.graph.windowsKioskAzureADUser","#microsoft.graph.windowsKioskLocalGroup","#microsoft.graph.windowsKioskLocalUser","#microsoft.graph.windowsKioskVisitor"}] String odataType;
};
[ClassVersion("1.0.0")]
class MSFT_MicrosoftGraphWindowsKioskForceUpdateSchedule
{
    [Write, Description("Day of month. Valid values 1 to 31")] UInt32 DayofMonth;
    [Write, Description("Day of week. Possible values are: sunday, monday, tuesday, wednesday, thursday, friday, saturday."), ValueMap{"sunday","monday","tuesday","wednesday","thursday","friday","saturday"}, Values{"sunday","monday","tuesday","wednesday","thursday","friday","saturday"}] String DayofWeek;
    [Write, Description("Recurrence schedule. Possible values are: none, daily, weekly, monthly."), ValueMap{"none","daily","weekly","monthly"}, Values{"none","daily","weekly","monthly"}] String Recurrence;
    [Write, Description("If true, runs the task immediately if StartDateTime is in the past, else, runs at the next recurrence.")] Boolean RunImmediatelyIfAfterStartDateTime;
    [Write, Description("The start time for the force restart.")] String StartDateTime;
};

[ClassVersion("1.0.0.0"), FriendlyName("IntuneDeviceConfigurationKioskPolicyWindows10")]
class MSFT_IntuneDeviceConfigurationKioskPolicyWindows10 : OMI_BaseResource
{
    [Write, Description("Enable public browsing kiosk mode for the Microsoft Edge browser. The Default is false.")] Boolean EdgeKioskEnablePublicBrowsing;
    [Write, Description("Specify URLs that the kiosk browser is allowed to navigate to")] String KioskBrowserBlockedUrlExceptions[];
    [Write, Description("Specify URLs that the kiosk browsers should not navigate to")] String KioskBrowserBlockedURLs[];
    [Write, Description("Specify the default URL the browser should navigate to on launch.")] String KioskBrowserDefaultUrl;
    [Write, Description("Enable the kiosk browser's end session button. By default, the end session button is disabled.")] Boolean KioskBrowserEnableEndSessionButton;
    [Write, Description("Enable the kiosk browser's home button. By default, the home button is disabled.")] Boolean KioskBrowserEnableHomeButton;
    [Write, Description("Enable the kiosk browser's navigation buttons(forward/back). By default, the navigation buttons are disabled.")] Boolean KioskBrowserEnableNavigationButtons;
    [Write, Description("Specify the number of minutes the session is idle until the kiosk browser restarts in a fresh state.  Valid values are 1-1440. Valid values 1 to 1440")] UInt32 KioskBrowserRestartOnIdleTimeInMinutes;
    [Write, Description("This policy setting allows to define a list of Kiosk profiles for a Kiosk configuration. This collection can contain a maximum of 3 elements."), EmbeddedInstance("MSFT_MicrosoftGraphwindowsKioskProfile")] String KioskProfiles[];
    [Write, Description("force update schedule for Kiosk devices."), EmbeddedInstance("MSFT_MicrosoftGraphwindowsKioskForceUpdateSchedule")] String WindowsKioskForceUpdateSchedule;
    [Write, Description("Admin provided description of the Device Configuration.")] String Description;
    [Key, Description("Admin provided name of the device configuration.")] String DisplayName;
    [Write, Description("The unique identifier for an entity. Read-only.")] String Id;
    [Write, Description("Represents the assignment to the Intune policy."), EmbeddedInstance("MSFT_DeviceManagementConfigurationPolicyAssignments")] String Assignments[];
    [Write, Description("Present ensures the policy exists, absent ensures it is removed."), ValueMap{"Present","Absent"}, Values{"Present","Absent"}] string Ensure;
    [Write, Description("Credentials of the Admin"), EmbeddedInstance("MSFT_Credential")] string Credential;
    [Write, Description("Id of the Azure Active Directory application to authenticate with.")] String ApplicationId;
    [Write, Description("Id of the Azure Active Directory tenant used for authentication.")] String TenantId;
    [Write, Description("Secret of the Azure Active Directory tenant used for authentication."), EmbeddedInstance("MSFT_Credential")] String ApplicationSecret;
    [Write, Description("Thumbprint of the Azure Active Directory application's authentication certificate to use for authentication.")] String CertificateThumbprint;
    [Write, Description("Managed ID being used for authentication.")] Boolean ManagedIdentity;
};
