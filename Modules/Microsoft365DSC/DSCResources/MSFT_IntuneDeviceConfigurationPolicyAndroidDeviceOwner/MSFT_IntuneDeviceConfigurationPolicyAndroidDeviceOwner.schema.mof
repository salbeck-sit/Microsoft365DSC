[ClassVersion("1.0.0.0")]
class MSFT_DeviceManagementConfigurationPolicyAssignments
{
    [Write, Description("The type of the target assignment."), ValueMap{"#microsoft.graph.groupAssignmentTarget","#microsoft.graph.allLicensedUsersAssignmentTarget","#microsoft.graph.allDevicesAssignmentTarget","#microsoft.graph.exclusionGroupAssignmentTarget","#microsoft.graph.configurationManagerCollectionAssignmentTarget"}, Values{"#microsoft.graph.groupAssignmentTarget","#microsoft.graph.allLicensedUsersAssignmentTarget","#microsoft.graph.allDevicesAssignmentTarget","#microsoft.graph.exclusionGroupAssignmentTarget","#microsoft.graph.configurationManagerCollectionAssignmentTarget"}] String dataType;
    [Write, Description("The type of filter of the target assignment i.e. Exclude or Include. Possible values are:none, include, exclude."), ValueMap{"none","include","exclude"}, Values{"none","include","exclude"}] String deviceAndAppManagementAssignmentFilterType;
    [Write, Description("The Id of the filter for the target assignment.")] String deviceAndAppManagementAssignmentFilterId;
    [Write, Description("The group Id that is the target of the assignment.")] String groupId;
    [Write, Description("The group Display Name that is the target of the assignment.")] String groupDisplayName;
    [Write, Description("The collection Id that is the target of the assignment.(ConfigMgr)")] String collectionId;
};
[ClassVersion("1.0.0")]
class MSFT_MicrosoftGraphapplistitem
{
    [Write, Description("odatatype of the item."), ValueMap{"#microsoft.graph.appleAppListItem"}, Values{"#microsoft.graph.appleAppListItem"}] String odataType;
    [Write, Description("Kiosk mode managed app id")] String appId;
    [Write, Description("Define the app store URL.")] String appStoreUrl;
    [Write, Description("Define the name of the app.")] String name;
    [Write, Description("Define the publisher of the app.")] String publisher;
};
[ClassVersion("1.0.0")]
class MSFT_MicrosoftGraphandroiddeviceowneruserfacingmessage
{
    [Write, Description("The default message displayed if the user's locale doesn't match with any of the localized messages.")] String defaultMessage;
    [Write, Description("The list of <locale, message> pairs. This collection can contain a maximum of 500 elements."), EmbeddedInstance("MSFT_MicrosoftGraphkeyvaluepair")] String localizedMessages[];
};
[ClassVersion("1.0.0")]
class MSFT_MicrosoftGraphkeyvaluepair
{
    [Write, Description("Name of the message localizedMessages.")] String Name;
    [Write, Description("Value of the message localizedMessages.")] String Value;
};
[ClassVersion("1.0.0")]
class MSFT_MicrosoftGraphandroiddeviceownerglobalproxy
{
    [Write, Description("The type of the global proxy."), ValueMap{"#microsoft.graph.androidDeviceOwnerGlobalProxyAutoConfig","#microsoft.graph.androidDeviceOwnerGlobalProxyDirect"}, Values{"#microsoft.graph.androidDeviceOwnerGlobalProxyAutoConfig","#microsoft.graph.androidDeviceOwnerGlobalProxyDirect"}] String odataType;
    [Write, Description("The proxy auto-config URL.")] String proxyAutoConfigURL;
    [Write, Description("The excluded hosts.")] String excludedHosts[];
    [Write, Description("The host name.")] String host;
    [Write, Description("The port.")] UInt32 port;
};
[ClassVersion("1.0.0")]
class MSFT_MicrosoftGraphandroiddeviceownerkioskmodeapppositionitem
{
    [Write, Description("Item to be arranged."), EmbeddedInstance("MSFT_MicrosoftGraphandroiddeviceownerkioskmodehomescreenitem")] String item;
    [Write, Description("Position of the item on the grid. Valid values 0 to 9999999.")] UInt32 position;
};
[ClassVersion("1.0.0")]
class MSFT_MicrosoftGraphandroiddeviceownerkioskmodehomescreenitem
{
    [Write, Description("Type of the item."), ValueMap{"#microsoft.graph.androidDeviceOwnerKioskModeApp","#microsoft.graph.androidDeviceOwnerKioskModeWeblink","#microsoft.graph.androidDeviceOwnerKioskModeManagedFolder"}, Values{"#microsoft.graph.androidDeviceOwnerKioskModeApp","#microsoft.graph.androidDeviceOwnerKioskModeWeblink","#microsoft.graph.androidDeviceOwnerKioskModeManagedFolder"}] String odataType;
    [Write, Description("The folder identifier.")] String folderIdentifier;
    [Write, Description("The folder name.")] String folderName;
    [Write, Description("Item to be arranged."), EmbeddedInstance("MSFT_MicrosoftGraphandroiddeviceownerkioskmodefolderitem")] String items[];
    [Write, Description("The class name of the item.")] String className;
    [Write, Description("The package of the item.")] String package;
    [Write, Description("The label of the item.")] String label;
    [Write, Description("The link of the item.")] String link;
};
[ClassVersion("1.0.0")]
class MSFT_MicrosoftGraphandroiddeviceownerkioskmodemanagedfolder
{
    [Write, Description("The folder identifier.")] String folderIdentifier;
    [Write, Description("The folder name.")] String folderName;
    [Write, Description("Item to be arranged."), EmbeddedInstance("MSFT_MicrosoftGraphandroiddeviceownerkioskmodefolderitem")] String items[];
};
[ClassVersion("1.0.0")]
class MSFT_MicrosoftGraphandroiddeviceownerkioskmodefolderitem
{
    [Write, Description("The type of the item."), ValueMap{"#microsoft.graph.androidDeviceOwnerKioskModeApp","#microsoft.graph.androidDeviceOwnerKioskModeWeblink"}, Values{"#microsoft.graph.androidDeviceOwnerKioskModeApp","#microsoft.graph.androidDeviceOwnerKioskModeWeblink"}] String odataType;
    [Write, Description("The class name of the item.")] String className;
    [Write, Description("The package of the item.")] String package;
    [Write, Description("The label of the item.")] String label;
    [Write, Description("The link of the item.")] String link;
};
[ClassVersion("1.0.0")]
class MSFT_MicrosoftGraphandroiddeviceownersystemupdatefreezeperiod
{
    [Write, Description("The day of the end date of the freeze period. Valid values 1 to 31.")] UInt32 endDay;
    [Write, Description("The month of the end date of the freeze period. Valid values 1 to 12.")] UInt32 endMonth;
    [Write, Description("The day of the start date of the freeze period. Valid values 1 to 31.")] UInt32 startDay;
    [Write, Description("The month of the start date of the freeze period. Valid values 1 to 12.")] UInt32 startMonth;
};

[ClassVersion("1.0.0.0"), FriendlyName("IntuneDeviceConfigurationPolicyAndroidDeviceOwner")]
class MSFT_IntuneDeviceConfigurationPolicyAndroidDeviceOwner : OMI_BaseResource
{
    [Write, Description("The Id of the policy.")] String Id;
    [Key, Description("The display name of hte policy.")] String DisplayName;
    [Write, Description("The description of the policy.")] String Description;
    [Write, Description("Block modification of accounts. Only supported on Dedicated devices.")] Boolean AccountsBlockModification;
    [Write, Description("When allowed, users can enable the 'unknown sources' setting to install apps from sources other than the Google Play Store.")] Boolean AppsAllowInstallFromUnknownSources;
    [Write, Description("Devices check for app updates daily. The default behavior is to let device users decide. They'll be able to set their preferences in the managed Google Play app."), ValueMap{"notConfigured","userChoice","never","wiFiOnly","always"}, Values{"notConfigured","userChoice","never","wiFiOnly","always"}] String AppsAutoUpdatePolicy;
    [Write, Description("Define the default permission policy for requests for runtime permissions."), ValueMap{"deviceDefault","prompt","autoGrant","autoDeny"}, Values{"deviceDefault","prompt","autoGrant","autoDeny"}] String AppsDefaultPermissionPolicy;
    [Write, Description("Enable a suggestion to apps that they skip their user tutorials and any introductory hints when they first start up, if applicable.")] Boolean AppsRecommendSkippingFirstUseHints;
    [Write, Description("A list of managed apps that will have their data cleared during a global sign-out in AAD shared device mode. This collection can contain a maximum of 500 elements."), EmbeddedInstance("MSFT_MicrosoftGraphapplistitem")] String AzureAdSharedDeviceDataClearApps[];
    [Write, Description("Block configuring Bluetooth.")] Boolean BluetoothBlockConfiguration;
    [Write, Description("Block access to work contacts from another device such as a car system when an Android device is paired via Bluetooth.")] Boolean BluetoothBlockContactSharing;
    [Write, Description("Block all cameras on the device")] Boolean CameraBlocked;
    [Write, Description("Block tethering and access to portable hotspots.")] Boolean CellularBlockWiFiTethering;
    [Write, Description("Blocks users from making any changes to credentials associated with certificates associated with certificates assigned to them.")] Boolean CertificateCredentialConfigurationDisabled;
    [Write, Description("Indicates whether or not text copied from one profile (personal or work) can be pasted in the other.")] Boolean CrossProfilePoliciesAllowCopyPaste;
    [Write, Description("Indicates whether data from one profile (personal or work) can be shared with apps in the other profile."), ValueMap{"notConfigured","crossProfileDataSharingBlocked","dataSharingFromWorkToPersonalBlocked","crossProfileDataSharingAllowed","unkownFutureValue"}, Values{"notConfigured","crossProfileDataSharingBlocked","dataSharingFromWorkToPersonalBlocked","crossProfileDataSharingAllowed","unkownFutureValue"}] String CrossProfilePoliciesAllowDataSharing;
    [Write, Description("Indicates whether or not contacts stored in work profile are shown in personal profile contact searches/incoming calls.")] Boolean CrossProfilePoliciesShowWorkContactsInPersonalProfile;
    [Write, Description("Block data roaming.")] Boolean DataRoamingBlocked;
    [Write, Description("Block user from manually setting the date and time.")] Boolean DateTimeConfigurationBlocked;
    [Write, Description("Represents the customized detailed help text provided to users when they attempt to modify managed settings on their device."), EmbeddedInstance("MSFT_MicrosoftGraphandroiddeviceowneruserfacingmessage")] String DetailedHelpText;
    [Write, Description("Represents the customized lock screen message provided to users when they attempt to modify managed settings on their device."), EmbeddedInstance("MSFT_MicrosoftGraphandroiddeviceowneruserfacingmessage")] String DeviceOwnerLockScreenMessage;
    [Write, Description("Represents the enrollment profile type."), ValueMap{"notConfigured","dedicatedDevice","fullyManaged"}, Values{"notConfigured","dedicatedDevice","fullyManaged"}] String EnrollmentProfile;
    [Write, Description("Block factory resetting from settings.")] Boolean FactoryResetBlocked;
    [Write, Description("Email addresses of device admins for factory reset protection. When a device is factory reset, it will require that one of these admins log in with their Google account to unlock the device. If none are specified, factory reset protection is not enabled.")] String FactoryResetDeviceAdministratorEmails[];
    [Write, Description("Proxy is set up directly with host, port and excluded hosts."), EmbeddedInstance("MSFT_MicrosoftGraphandroiddeviceownerglobalproxy")] String GlobalProxy;
    [Write, Description("Blocking prevents users from adding their personal Google account to their device.")] Boolean GoogleAccountsBlocked;
    [Write, Description("Indicates whether a user can access the device's Settings app while in Kiosk Mode.")] Boolean KioskCustomizationDeviceSettingsBlocked;
    [Write, Description("Whether the power menu is shown when a user long presses the Power button of a device in Kiosk Mode.")] Boolean KioskCustomizationPowerButtonActionsBlocked;
    [Write, Description("Indicates whether system info and notifications are disabled in Kiosk Mode"), ValueMap{"notConfigured","notificationsAndSystemInfoEnabled","systemInfoOnly"}, Values{"notConfigured","notificationsAndSystemInfoEnabled","systemInfoOnly"}] String KioskCustomizationStatusBar;
    [Write, Description("Indicates whether system error dialogs for crashed or unresponsive apps are shown in Kiosk Mode.")] Boolean KioskCustomizationSystemErrorWarnings;
    [Write, Description("Indicates which navigation features are enabled in Kiosk Mode."), ValueMap{"notConfigured","navigationEnabled","homeButtonOnly"}, Values{"notConfigured","navigationEnabled","homeButtonOnly"}] String KioskCustomizationSystemNavigation;
    [Write, Description("Whether or not to enable app ordering in Kiosk Mode.")] Boolean KioskModeAppOrderEnabled;
    [Write, Description("The ordering of items on Kiosk Mode Managed Home Screen. This collection can contain a maximum of 500 elements."), EmbeddedInstance("MSFT_MicrosoftGraphandroiddeviceownerkioskmodeapppositionitem")] String KioskModeAppPositions[];
    [Write, Description("A list of managed apps that will be shown when the device is in Kiosk Mode. This collection can contain a maximum of 500 elements."), EmbeddedInstance("MSFT_MicrosoftGraphapplistitem")] String KioskModeApps[];
    [Write, Description("Whether or not to alphabetize applications within a folder in Kiosk Mode.")] Boolean KioskModeAppsInFolderOrderedByName;
    [Write, Description("Enable end-users to configure and pair devices over Bluetooth.")] Boolean KioskModeBluetoothConfigurationEnabled;
    [Write, Description("Whether or not to allow a user to easy access to the debug menu in Kiosk Mode")] Boolean KioskModeDebugMenuEasyAccessEnabled;
    [Write, Description("The 4-6 digit PIN will be the code an IT administrator enters on a multi-app dedicated device to pause kiosk mode.")] String KioskModeExitCode;
    [Write, Description("Whether or not to allow a user to use the flashlight in Kiosk Mode.")] Boolean KioskModeFlashlightConfigurationEnabled;
    [Write, Description("Folder icon configuration for managed home screen in Kiosk Mode."), ValueMap{"notConfigured","darkSquare","darkCircle","lightSquare","lightCircle"}, Values{"notConfigured","darkSquare","darkCircle","lightSquare","lightCircle"}] String KioskModeFolderIcon;
    [Write, Description("Number of rows for Managed Home Screen grid with app ordering enabled in Kiosk Mode. Valid values 1 to 9999999.")] UInt32 KioskModeGridHeight;
    [Write, Description("Number of columns for Managed Home Screen grid with app ordering enabled in Kiosk Mode. Valid values 1 to 9999999.")] UInt32 KioskModeGridWidth;
    [Write, Description("Icon size configuration for managed home screen in Kiosk Mode."), ValueMap{"notConfigured","smallest","small","regular","large","largest"}, Values{"notConfigured","smallest","small","regular","large","largest"}] String KioskModeIconSize;
    [Write, Description("Whether or not to lock home screen to the end user in Kiosk Mode.")] Boolean KioskModeLockHomeScreen;
    [Write, Description("A list of managed folders for a device in Kiosk Mode. This collection can contain a maximum of 500 elements."), EmbeddedInstance("MSFT_MicrosoftGraphandroiddeviceownerkioskmodemanagedfolder")] String KioskModeManagedFolders[];
    [Write, Description("Whether or not to automatically sign-out of MHS and Shared device mode applications after inactive for Managed Home Screen.")] Boolean KioskModeManagedHomeScreenAutoSignout;
    [Write, Description("Number of seconds to give user notice before automatically signing them out for Managed Home Screen. Valid values 0 to 9999999.")] UInt32 KioskModeManagedHomeScreenInactiveSignOutDelayInSeconds;
    [Write, Description("Number of seconds device is inactive before automatically signing user out for Managed Home Screen. Valid values 0 to 9999999.")] UInt32 KioskModeManagedHomeScreenInactiveSignOutNoticeInSeconds;
    [Write, Description("Complexity of PIN for sign-in session for Managed Home Screen."), ValueMap{"notConfigured","simple","complex"}, Values{"notConfigured","simple","complex"}] String KioskModeManagedHomeScreenPinComplexity;
    [Write, Description("Whether or not require user to set a PIN for sign-in session for Managed Home Screen.")] Boolean KioskModeManagedHomeScreenPinRequired;
    [Write, Description("Whether or not required user to enter session PIN if screensaver has appeared for Managed Home Screen.")] Boolean KioskModeManagedHomeScreenPinRequiredToResume;
    [Write, Description("Custom URL background for sign-in screen for Managed Home Screen.")] String KioskModeManagedHomeScreenSignInBackground;
    [Write, Description("Custom URL branding logo for sign-in screen and session pin page for Managed Home Screen.")] String KioskModeManagedHomeScreenSignInBrandingLogo;
    [Write, Description("Whether or not show sign-in screen for Managed Home Screen.")] Boolean KioskModeManagedHomeScreenSignInEnabled;
    [Write, Description("Whether or not to use single app kiosk mode or multi-app kiosk mode.")] Boolean KioskModeManagedSettingsEntryDisabled;
    [Write, Description("Whether or not to allow a user to change the media volume in Kiosk Mode.")] Boolean KioskModeMediaVolumeConfigurationEnabled;
    [Write, Description("Screen orientation configuration for managed home screen in Kiosk Mode."), ValueMap{"notConfigured","portrait","landscape","autoRotate"}, Values{"notConfigured","portrait","landscape","autoRotate"}] String KioskModeScreenOrientation;
    [Write, Description("Start screen saver when the device screen times out or locks.")] Boolean KioskModeScreenSaverConfigurationEnabled;
    [Write, Description("Whether or not the device screen should show the screen saver if audio/video is playing in Kiosk Mode.")] Boolean KioskModeScreenSaverDetectMediaDisabled;
    [Write, Description("The number of seconds that the device will display the screen saver for in Kiosk Mode. Valid values 0 to 9999999")] UInt32 KioskModeScreenSaverDisplayTimeInSeconds;
    [Write, Description("URL for an image that will be the device's screen saver in Kiosk Mode.")] String KioskModeScreenSaverImageUrl;
    [Write, Description("The number of seconds the device needs to be inactive for before the screen saver is shown in Kiosk Mode. Valid values 1 to 9999999")] UInt32 KioskModeScreenSaverStartDelayInSeconds;
    [Write, Description("Whether or not to display application notification badges in Kiosk Mode.")] Boolean KioskModeShowAppNotificationBadge;
    [Write, Description("Whether or not to allow a user to access basic device information.")] Boolean KioskModeShowDeviceInfo;
    [Write, Description("Whether or not to use single app kiosk mode or multi-app kiosk mode."), ValueMap{"notConfigured","singleAppMode","multiAppMode"}, Values{"notConfigured","singleAppMode","multiAppMode"}] String KioskModeUseManagedHomeScreenApp;
    [Write, Description("Enable IT administrators to temporarily leave multi-app kiosk mode to make changes on the device.")] Boolean KioskModeVirtualHomeButtonEnabled;
    [Write, Description("Enable a soft-key button that returns users to the Managed Home Screen. Choose between a persistent, floating button or a button activated by a swipe-up gesture."), ValueMap{"notConfigured","swipeUp","floating"}, Values{"notConfigured","swipeUp","floating"}] String KioskModeVirtualHomeButtonType;
    [Write, Description("Customize the appearance of the screen background for assigned groups.")] String KioskModeWallpaperUrl;
    [Write, Description("The restricted set of WIFI SSIDs available for the user to configure in Kiosk Mode. This collection can contain a maximum of 500 elements.")] String KioskModeWifiAllowedSsids[];
    [Write, Description("Enable end-users to connect to different Wi-Fi networks.")] Boolean KioskModeWiFiConfigurationEnabled;
    [Write, Description("Block unmuting the microphone and adjusting the microphone volume.")] Boolean MicrophoneForceMute;
    [Write, Description("Indicates whether or not to you want configure Microsoft Launcher.")] Boolean MicrosoftLauncherConfigurationEnabled;
    [Write, Description("Indicates whether or not the user can modify the wallpaper to personalize their device.")] Boolean MicrosoftLauncherCustomWallpaperAllowUserModification;
    [Write, Description("Indicates whether or not to configure the wallpaper on the targeted devices.")] Boolean MicrosoftLauncherCustomWallpaperEnabled;
    [Write, Description("Indicates the URL for the image file to use as the wallpaper on the targeted devices.")] String MicrosoftLauncherCustomWallpaperImageUrl;
    [Write, Description("Indicates whether or not the user can modify the device dock configuration on the device.")] Boolean MicrosoftLauncherDockPresenceAllowUserModification;
    [Write, Description("Indicates whether or not you want to configure the device dock. "), ValueMap{"notConfigured","show","hide","disabled"}, Values{"notConfigured","show","hide","disabled"}] String MicrosoftLauncherDockPresenceConfiguration;
    [Write, Description("Indicates whether or not the user can modify the launcher feed on the device.")] Boolean MicrosoftLauncherFeedAllowUserModification;
    [Write, Description("Indicates whether or not the user can modify the launcher feed on the device.")] Boolean MicrosoftLauncherFeedEnabled;
    [Write, Description("Indicates whether or not you want to configure the device dock."), ValueMap{"notConfigured","top","bottom","hide"}, Values{"notConfigured","top","bottom","hide"}] String MicrosoftLauncherSearchBarPlacementConfiguration;
    [Write, Description("Whether the network escape hatch is enabled. If a network connection can't be made at boot time, the escape hatch prompts the user to temporarily connect to a network in order to refresh the device policy. After applying policy, the temporary network will be forgotten and the device will continue booting. This prevents being unable to connect to a network if there is no suitable network in the last policy and the device boots into an app in lock task mode, or the user is otherwise unable to reach device settings.")] Boolean NetworkEscapeHatchAllowed;
    [Write, Description("Block usage of NFC to beam data from apps.")] Boolean NfcBlockOutgoingBeam;
    [Write, Description("Disable lock screen")] Boolean PasswordBlockKeyguard;
    [Write, Description("These features are accessible to users when the device is locked. Users will not be able to see or access disabled features."), ValueMap{"notConfigured","camera","notifications","unredactedNotifications","trustAgents","fingerprint","remoteInput","allFeatures","face","iris","biometrics"}, Values{"notConfigured","camera","notifications","unredactedNotifications","trustAgents","fingerprint","remoteInput","allFeatures","face","iris","biometrics"}] String PasswordBlockKeyguardFeatures[];
    [Write, Description("Number of days until device password must be changed. (1-365)")] UInt32 PasswordExpirationDays;
    [Write, Description("Indicates the minimum length of the password required on the device. Valid values 4 to 16")] UInt32 PasswordMinimumLength;
    [Write, Description("Indicates the minimum number of letter characters required for device password. Valid values 1 to 16")] UInt32 PasswordMinimumLetterCharacters;
    [Write, Description("Indicates the minimum number of lower case characters required for device password. Valid values 1 to 16")] UInt32 PasswordMinimumLowerCaseCharacters;
    [Write, Description("Indicates the minimum number of non-letter characters required for device password. Valid values 1 to 16")] UInt32 PasswordMinimumNonLetterCharacters;
    [Write, Description("Indicates the minimum number of numeric characters required for device password. Valid values 1 to 16")] UInt32 PasswordMinimumNumericCharacters;
    [Write, Description("Indicates the minimum number of symbol characters required for device password. Valid values 1 to 16")] UInt32 PasswordMinimumSymbolCharacters;
    [Write, Description("Indicates the minimum number of upper case letter characters required for device password. Valid values 1 to 16")] UInt32 PasswordMinimumUpperCaseCharacters;
    [Write, Description("Maximum time after which the device will lock. Can disable screen lock as well so that it never times out.")] UInt32 PasswordMinutesOfInactivityBeforeScreenTimeout;
    [Write, Description("Enter the number of unique passwords required before a user can reuse an old one. (1-24)")] UInt32 PasswordPreviousPasswordCountToBlock;
    [Write, Description("Set the password's complexity requirements. Additional password requirements will become available based on your selection."), ValueMap{"deviceDefault","required","numeric","numericComplex","alphabetic","alphanumeric","alphanumericWithSymbols","lowSecurityBiometric","customPassword"}, Values{"deviceDefault","required","numeric","numericComplex","alphabetic","alphanumeric","alphanumericWithSymbols","lowSecurityBiometric","customPassword"}] String PasswordRequiredType;
    [Write, Description("Indicates the timeout period after which a device must be unlocked using a form of strong authentication."), ValueMap{"deviceDefault","daily","unkownFutureValue"}, Values{"deviceDefault","daily","unkownFutureValue"}] String PasswordRequireUnlock;
    [Write, Description("Number of consecutive times an incorrect password can be entered before device is wiped of all data. (4-11)")] UInt32 PasswordSignInFailureCountBeforeFactoryReset;
    [Write, Description("Indicates whether the user can install apps from unknown sources on the personal profile.")] Boolean PersonalProfileAppsAllowInstallFromUnknownSources;
    [Write, Description("Indicates whether to disable the use of the camera on the personal profile.")] Boolean PersonalProfileCameraBlocked;
    [Write, Description("Policy applied to applications in the personal profile. This collection can contain a maximum of 500 elements."), EmbeddedInstance("MSFT_MicrosoftGraphapplistitem")] String PersonalProfilePersonalApplications[];
    [Write, Description("Used together with PersonalProfilePersonalApplications to control how apps in the personal profile are allowed or blocked"), ValueMap{"notConfigured","blockedApps","allowedApps"}, Values{"notConfigured","blockedApps","allowedApps"}] String PersonalProfilePlayStoreMode;
    [Write, Description("Indicates whether to disable the capability to take screenshots on the personal profile.")] Boolean PersonalProfileScreenCaptureBlocked;
    [Write, Description("Users get access to all apps, except the ones you've required uninstall in Client Apps. If you choose 'Not configured' for this setting, users can only access the apps you've listed as available or required in Client Apps."), ValueMap{"notConfigured","allowList","blockList"}, Values{"notConfigured","allowList","blockList"}] String PlayStoreMode;
    [Write, Description("Block screen capture")] Boolean ScreenCaptureBlocked;
    [Write, Description("Represents the security common criteria mode enabled provided to users when they attempt to modify managed settings on their device.")] Boolean SecurityCommonCriteriaModeEnabled;
    [Write, Description("Indicates whether or not the user is allowed to access developer settings like developer options and safe boot on the device.")] Boolean SecurityDeveloperSettingsEnabled;
    [Write, Description("Enable Google Play Protect to scan apps before and after they're installed. If it detects a threat, it might warn the user to remove the app from the device. Required by default.")] Boolean SecurityRequireVerifyApps;
    [Write, Description("Represents the customized short help text provided to users when they attempt to modify managed settings on their device."), EmbeddedInstance("MSFT_MicrosoftGraphandroiddeviceowneruserfacingmessage")] String ShortHelpText;
    [Write, Description("Block access to the status bar, including notifications and quick settings.")] Boolean StatusBarBlocked;
    [Write, Description("The battery plugged in modes for which the device stays on. When using this setting, it is recommended to clear the Time to lock screen setting so that the device doesn't lock itself while it stays on."), ValueMap{"notConfigured","ac","usb","wireless"}, Values{"notConfigured","ac","usb","wireless"}] String StayOnModes[];
    [Write, Description("Allow USB storage.")] Boolean StorageAllowUsb;
    [Write, Description("Block mounting of external media.")] Boolean StorageBlockExternalMedia;
    [Write, Description("Block transfer of files over USB.")] Boolean StorageBlockUsbFileTransfer;
    [Write, Description("Indicates the annually repeating time periods during which system updates are postponed. This collection can contain a maximum of 500 elements."), EmbeddedInstance("MSFT_MicrosoftGraphandroiddeviceownersystemupdatefreezeperiod")] String SystemUpdateFreezePeriods[];
    [Write, Description("When over-the-air updates are available for this device, they will be installed based on this policy.?"), ValueMap{"deviceDefault","postpone","windowed","automatic"}, Values{"deviceDefault","postpone","windowed","automatic"}] String SystemUpdateInstallType;
    [Write, Description("End of the maintenance window in the device's time zone.?")] UInt32 SystemUpdateWindowEndMinutesAfterMidnight;
    [Write, Description("Beginning of the maintenance window in the device's time zone.?")] UInt32 SystemUpdateWindowStartMinutesAfterMidnight;
    [Write, Description("Disable window notifications such as toasts, incoming calls, outgoing calls, system alerts, and system errors.?")] Boolean SystemWindowsBlocked;
    [Write, Description("Blocks users from adding and signing in to personal accounts while on the device.")] Boolean UsersBlockAdd;
    [Write, Description("Block removal of users.")] Boolean UsersBlockRemove;
    [Write, Description("Block changes to volume.")] Boolean VolumeBlockAdjustment;
    [Write, Description("Enabling this forces all network traffic through the VPN tunnel. If a connection to the VPN can't be established, no network traffic will be allowed.")] Boolean VpnAlwaysOnLockdownMode;
    [Write, Description("Android app package name for app that will handle an always-on VPN connection.")] String VpnAlwaysOnPackageIdentifier;
    [Write, Description("Block user creation or editing of any Wi-Fi configurations.")] Boolean WifiBlockEditConfigurations;
    [Write, Description("Block changes to Wi-Fi configurations created by the device owner. Users can create their own Wi-Fi configurations.")] Boolean WifiBlockEditPolicyDefinedConfigurations;
    [Write, Description("Indicates the number of days that a work profile password can be set before it expires and a new password will be required. Valid values 1 to 365")] UInt32 WorkProfilePasswordExpirationDays;
    [Write, Description("Indicates the minimum length of the work profile password. Valid values 4 to 16")] UInt32 WorkProfilePasswordMinimumLength;
    [Write, Description("Indicates the minimum number of numeric characters required for the work profile password. Valid values 1 to 16")] UInt32 WorkProfilePasswordMinimumLetterCharacters;
    [Write, Description("Indicates the minimum number of non-letter characters required for the work profile password. Valid values 1 to 16")] UInt32 WorkProfilePasswordMinimumLowerCaseCharacters;
    [Write, Description("Indicates the minimum number of letter characters required for the work profile password. Valid values 1 to 16")] UInt32 WorkProfilePasswordMinimumNonLetterCharacters;
    [Write, Description("Indicates the minimum number of lower-case characters required for the work profile password. Valid values 1 to 16")] UInt32 WorkProfilePasswordMinimumNumericCharacters;
    [Write, Description("Indicates the minimum number of upper-case letter characters required for the work profile password. Valid values 1 to 16")] UInt32 WorkProfilePasswordMinimumSymbolCharacters;
    [Write, Description("Indicates the minimum number of symbol characters required for the work profile password. Valid values 1 to 16")] UInt32 WorkProfilePasswordMinimumUpperCaseCharacters;
    [Write, Description("Indicates the length of the work profile password history, where the user will not be able to enter a new password that is the same as any password in the history. Valid values 0 to 24")] UInt32 WorkProfilePasswordPreviousPasswordCountToBlock;
    [Write, Description("Indicates the minimum password quality required on the work profile password."), ValueMap{"deviceDefault","required","numeric","numericComplex","alphabetic","alphanumeric","alphanumericWithSymbols","lowSecurityBiometric","customPassword"}, Values{"deviceDefault","required","numeric","numericComplex","alphabetic","alphanumeric","alphanumericWithSymbols","lowSecurityBiometric","customPassword"}] String WorkProfilePasswordRequiredType;
    [Write, Description("Indicates the timeout period after which a work profile must be unlocked using a form of strong authentication."), ValueMap{"deviceDefault","daily","unkownFutureValue"}, Values{"deviceDefault","daily","unkownFutureValue"}] String WorkProfilePasswordRequireUnlock;
    [Write, Description("Indicates the number of times a user can enter an incorrect work profile password before the device is wiped. Valid values 4 to 11")] UInt32 WorkProfilePasswordSignInFailureCountBeforeFactoryReset;
    [Write, Description("Represents the assignment to the Intune policy."), EmbeddedInstance("MSFT_DeviceManagementConfigurationPolicyAssignments")] String Assignments[];
    [Write, Description("Present ensures the policy exists, absent ensures it is removed."), ValueMap{"Present","Absent"}, Values{"Present","Absent"}] string Ensure;
    [Write, Description("Credentials of the Intune Admin"), EmbeddedInstance("MSFT_Credential")] string Credential;
    [Write, Description("Id of the Azure Active Directory application to authenticate with.")] String ApplicationId;
    [Write, Description("Id of the Azure Active Directory tenant used for authentication.")] String TenantId;
    [Write, Description("Secret of the Azure Active Directory tenant used for authentication."), EmbeddedInstance("MSFT_Credential")] String ApplicationSecret;
    [Write, Description("Thumbprint of the Azure Active Directory application's authentication certificate to use for authentication.")] String CertificateThumbprint;
    [Write, Description("Managed ID being used for authentication.")] Boolean ManagedIdentity;
};
