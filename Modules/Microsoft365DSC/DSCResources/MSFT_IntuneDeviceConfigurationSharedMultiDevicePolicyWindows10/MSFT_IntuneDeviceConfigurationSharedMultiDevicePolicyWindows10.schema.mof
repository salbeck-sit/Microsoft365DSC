[ClassVersion("1.0.0.0")]
class MSFT_DeviceManagementConfigurationPolicyAssignments
{
    [Write, Description("The type of the target assignment."), ValueMap{"#microsoft.graph.groupAssignmentTarget","#microsoft.graph.allLicensedUsersAssignmentTarget","#microsoft.graph.allDevicesAssignmentTarget","#microsoft.graph.exclusionGroupAssignmentTarget","#microsoft.graph.configurationManagerCollectionAssignmentTarget"}, Values{"#microsoft.graph.groupAssignmentTarget","#microsoft.graph.allLicensedUsersAssignmentTarget","#microsoft.graph.allDevicesAssignmentTarget","#microsoft.graph.exclusionGroupAssignmentTarget","#microsoft.graph.configurationManagerCollectionAssignmentTarget"}] String dataType;
    [Write, Description("The type of filter of the target assignment i.e. Exclude or Include. Possible values are:none, include, exclude."), ValueMap{"none","include","exclude"}, Values{"none","include","exclude"}] String deviceAndAppManagementAssignmentFilterType;
    [Write, Description("The Id of the filter for the target assignment.")] String deviceAndAppManagementAssignmentFilterId;
    [Write, Description("The group Id that is the target of the assignment.")] String groupId;
    [Write, Description("The group Display Name that is the target of the assignment.")] String groupDisplayName;
    [Write, Description("The collection Id that is the target of the assignment.(ConfigMgr)")] String collectionId;
};
[ClassVersion("1.0.0")]
class MSFT_MicrosoftGraphSharedPCAccountManagerPolicy
{
    [Write, Description("Configures when accounts are deleted. Possible values are: immediate, diskSpaceThreshold, diskSpaceThresholdOrInactiveThreshold."), ValueMap{"immediate","diskSpaceThreshold","diskSpaceThresholdOrInactiveThreshold"}, Values{"immediate","diskSpaceThreshold","diskSpaceThresholdOrInactiveThreshold"}] String AccountDeletionPolicy;
    [Write, Description("Sets the percentage of available disk space a PC should have before it stops deleting cached shared PC accounts. Only applies when AccountDeletionPolicy is DiskSpaceThreshold or DiskSpaceThresholdOrInactiveThreshold. Valid values 0 to 100")] UInt32 CacheAccountsAboveDiskFreePercentage;
    [Write, Description("Specifies when the accounts will start being deleted when they have not been logged on during the specified period, given as number of days. Only applies when AccountDeletionPolicy is DiskSpaceThreshold or DiskSpaceThresholdOrInactiveThreshold.")] UInt32 InactiveThresholdDays;
    [Write, Description("Sets the percentage of disk space remaining on a PC before cached accounts will be deleted to free disk space. Accounts that have been inactive the longest will be deleted first. Only applies when AccountDeletionPolicy is DiskSpaceThresholdOrInactiveThreshold. Valid values 0 to 100")] UInt32 RemoveAccountsBelowDiskFreePercentage;
};

[ClassVersion("1.0.0.0"), FriendlyName("IntuneDeviceConfigurationSharedMultiDevicePolicyWindows10")]
class MSFT_IntuneDeviceConfigurationSharedMultiDevicePolicyWindows10 : OMI_BaseResource
{
    [Write, Description("Specifies how accounts are managed on a shared PC. Only applies when disableAccountManager is false."), EmbeddedInstance("MSFT_MicrosoftGraphsharedPCAccountManagerPolicy")] String AccountManagerPolicy;
    [Write, Description("Indicates which type of accounts are allowed to use on a shared PC. Possible values are: notConfigured, guest, domain."), ValueMap{"notConfigured","guest","domain"}, Values{"notConfigured","guest","domain"}] String AllowedAccounts[];
    [Write, Description("Specifies whether local storage is allowed on a shared PC.")] Boolean AllowLocalStorage;
    [Write, Description("Disables the account manager for shared PC mode.")] Boolean DisableAccountManager;
    [Write, Description("Specifies whether the default shared PC education environment policies should be disabled. For Windows 10 RS2 and later, this policy will be applied without setting Enabled to true.")] Boolean DisableEduPolicies;
    [Write, Description("Specifies whether the default shared PC power policies should be disabled.")] Boolean DisablePowerPolicies;
    [Write, Description("Disables the requirement to sign in whenever the device wakes up from sleep mode.")] Boolean DisableSignInOnResume;
    [Write, Description("Enables shared PC mode and applies the shared pc policies.")] Boolean Enabled;
    [Write, Description("Specifies whether to auto connect new non-admin Azure AD accounts to pre-configured candidate local accounts. Possible values are: notConfigured, enabled, disabled."), ValueMap{"notConfigured","enabled","disabled"}, Values{"notConfigured","enabled","disabled"}] String FastFirstSignIn;
    [Write, Description("Specifies the time in seconds that a device must sit idle before the PC goes to sleep. Setting this value to 0 prevents the sleep timeout from occurring.")] UInt32 IdleTimeBeforeSleepInSeconds;
    [Write, Description("Specifies the display text for the account shown on the sign-in screen which launches the app specified by SetKioskAppUserModelId. Only applies when KioskAppUserModelId is set.")] String KioskAppDisplayName;
    [Write, Description("Specifies the application user model ID of the app to use with assigned access.")] String KioskAppUserModelId;
    [Write, Description("Specifies whether local storage is allowed on a shared PC. Possible values are: notConfigured, enabled, disabled."), ValueMap{"notConfigured","enabled","disabled"}, Values{"notConfigured","enabled","disabled"}] String LocalStorage;
    [Write, Description("Specifies the daily start time of maintenance hour.")] String MaintenanceStartTime;
    [Write, Description("Disables the account manager for shared PC mode. Possible values are: notConfigured, enabled, disabled."), ValueMap{"notConfigured","enabled","disabled"}, Values{"notConfigured","enabled","disabled"}] String SetAccountManager;
    [Write, Description("Specifies whether the default shared PC education environment policies should be enabled/disabled/not configured. For Windows 10 RS2 and later, this policy will be applied without setting Enabled to true. Possible values are: notConfigured, enabled, disabled."), ValueMap{"notConfigured","enabled","disabled"}, Values{"notConfigured","enabled","disabled"}] String SetEduPolicies;
    [Write, Description("Specifies whether the default shared PC power policies should be enabled/disabled. Possible values are: notConfigured, enabled, disabled."), ValueMap{"notConfigured","enabled","disabled"}, Values{"notConfigured","enabled","disabled"}] String SetPowerPolicies;
    [Write, Description("Specifies the requirement to sign in whenever the device wakes up from sleep mode. Possible values are: notConfigured, enabled, disabled."), ValueMap{"notConfigured","enabled","disabled"}, Values{"notConfigured","enabled","disabled"}] String SignInOnResume;
    [Write, Description("Admin provided description of the Device Configuration.")] String Description;
    [Key, Description("Admin provided name of the device configuration.")] String DisplayName;
    [Write, Description("The unique identifier for an entity. Read-only.")] String Id;
    [Write, Description("Represents the assignment to the Intune policy."), EmbeddedInstance("MSFT_DeviceManagementConfigurationPolicyAssignments")] String Assignments[];
    [Write, Description("Present ensures the policy exists, absent ensures it is removed."), ValueMap{"Present","Absent"}, Values{"Present","Absent"}] string Ensure;
    [Write, Description("Credentials of the Admin"), EmbeddedInstance("MSFT_Credential")] string Credential;
    [Write, Description("Id of the Azure Active Directory application to authenticate with.")] String ApplicationId;
    [Write, Description("Id of the Azure Active Directory tenant used for authentication.")] String TenantId;
    [Write, Description("Secret of the Azure Active Directory tenant used for authentication."), EmbeddedInstance("MSFT_Credential")] String ApplicationSecret;
    [Write, Description("Thumbprint of the Azure Active Directory application's authentication certificate to use for authentication.")] String CertificateThumbprint;
    [Write, Description("Managed ID being used for authentication.")] Boolean ManagedIdentity;
};
