[ClassVersion("1.0.0.0")]
class MSFT_DeviceManagementConfigurationPolicyAssignments
{
    [Write, Description("The type of the target assignment."), ValueMap{"#microsoft.graph.groupAssignmentTarget","#microsoft.graph.allLicensedUsersAssignmentTarget","#microsoft.graph.allDevicesAssignmentTarget","#microsoft.graph.exclusionGroupAssignmentTarget","#microsoft.graph.configurationManagerCollectionAssignmentTarget"}, Values{"#microsoft.graph.groupAssignmentTarget","#microsoft.graph.allLicensedUsersAssignmentTarget","#microsoft.graph.allDevicesAssignmentTarget","#microsoft.graph.exclusionGroupAssignmentTarget","#microsoft.graph.configurationManagerCollectionAssignmentTarget"}] String dataType;
    [Write, Description("The type of filter of the target assignment i.e. Exclude or Include. Possible values are:none, include, exclude."), ValueMap{"none","include","exclude"}, Values{"none","include","exclude"}] String deviceAndAppManagementAssignmentFilterType;
    [Write, Description("The Id of the filter for the target assignment.")] String deviceAndAppManagementAssignmentFilterId;
    [Write, Description("The group Id that is the target of the assignment.")] String groupId;
    [Write, Description("The group Display Name that is the target of the assignment.")] String groupDisplayName;
    [Write, Description("The collection Id that is the target of the assignment.(ConfigMgr)")] String collectionId;
};

[ClassVersion("1.0.0.0"), FriendlyName("IntuneDeviceConfigurationWiredNetworkPolicyWindows10")]
class MSFT_IntuneDeviceConfigurationWiredNetworkPolicyWindows10 : OMI_BaseResource
{
    [Write, Description("Specify the duration for which automatic authentication attempts will be blocked from occuring after a failed authentication attempt.")] UInt32 AuthenticationBlockPeriodInMinutes;
    [Write, Description("Specify the authentication method. Possible values are: certificate, usernameAndPassword, derivedCredential. Possible values are: certificate, usernameAndPassword, derivedCredential, unknownFutureValue."), ValueMap{"certificate","usernameAndPassword","derivedCredential","unknownFutureValue"}, Values{"certificate","usernameAndPassword","derivedCredential","unknownFutureValue"}] String AuthenticationMethod;
    [Write, Description("Specify the number of seconds for the client to wait after an authentication attempt before failing. Valid range 1-3600.")] UInt32 AuthenticationPeriodInSeconds;
    [Write, Description("Specify the number of seconds between a failed authentication and the next authentication attempt. Valid range 1-3600.")] UInt32 AuthenticationRetryDelayPeriodInSeconds;
    [Write, Description("Specify whether to authenticate the user, the device, either, or to use guest authentication (none). If you're using certificate authentication, make sure the certificate type matches the authentication type. Possible values are: none, user, machine, machineOrUser, guest. Possible values are: none, user, machine, machineOrUser, guest, unknownFutureValue."), ValueMap{"none","user","machine","machineOrUser","guest","unknownFutureValue"}, Values{"none","user","machine","machineOrUser","guest","unknownFutureValue"}] String AuthenticationType;
    [Write, Description("When TRUE, caches user credentials on the device so that users don't need to keep entering them each time they connect. When FALSE, do not cache credentials. Default value is FALSE.")] Boolean CacheCredentials;
    [Write, Description("When TRUE, prevents the user from being prompted to authorize new servers for trusted certification authorities when EAP type is selected as PEAP. When FALSE, does not prevent the user from being prompted. Default value is FALSE.")] Boolean DisableUserPromptForServerValidation;
    [Write, Description("Specify the number of seconds to wait before sending an EAPOL (Extensible Authentication Protocol over LAN) Start message. Valid range 1-3600.")] UInt32 EapolStartPeriodInSeconds;
    [Write, Description("Extensible Authentication Protocol (EAP). Indicates the type of EAP protocol set on the Wi-Fi endpoint (router). Possible values are: eapTls, leap, eapSim, eapTtls, peap, eapFast, teap. Possible values are: eapTls, leap, eapSim, eapTtls, peap, eapFast, teap."), ValueMap{"eapTls","leap","eapSim","eapTtls","peap","eapFast","teap"}, Values{"eapTls","leap","eapSim","eapTtls","peap","eapFast","teap"}] String EapType;
    [Write, Description("When TRUE, the automatic configuration service for wired networks requires the use of 802.1X for port authentication. When FALSE, 802.1X is not required. Default value is FALSE.")] Boolean Enforce8021X;
    [Write, Description("When TRUE, forces FIPS compliance. When FALSE, does not enable FIPS compliance. Default value is FALSE.")] Boolean ForceFIPSCompliance;
    [Write, Description("Specify inner authentication protocol for EAP TTLS. Possible values are: unencryptedPassword, challengeHandshakeAuthenticationProtocol, microsoftChap, microsoftChapVersionTwo. Possible values are: unencryptedPassword, challengeHandshakeAuthenticationProtocol, microsoftChap, microsoftChapVersionTwo."), ValueMap{"unencryptedPassword","challengeHandshakeAuthenticationProtocol","microsoftChap","microsoftChapVersionTwo"}, Values{"unencryptedPassword","challengeHandshakeAuthenticationProtocol","microsoftChap","microsoftChapVersionTwo"}] String InnerAuthenticationProtocolForEAPTTLS;
    [Write, Description("Specify the maximum authentication failures allowed for a set of credentials. Valid range 1-100.")] UInt32 MaximumAuthenticationFailures;
    [Write, Description("Specify the maximum number of EAPOL (Extensible Authentication Protocol over LAN) Start messages to be sent before returning failure. Valid range 1-100.")] UInt32 MaximumEAPOLStartMessages;
    [Write, Description("Specify the string to replace usernames for privacy when using EAP TTLS or PEAP.")] String OuterIdentityPrivacyTemporaryValue;
    [Write, Description("When TRUE, enables verification of server's identity by validating the certificate when EAP type is selected as PEAP. When FALSE, the certificate is not validated. Default value is TRUE.")] Boolean PerformServerValidation;
    [Write, Description("When TRUE, enables cryptographic binding when EAP type is selected as PEAP. When FALSE, does not enable cryptogrpahic binding. Default value is TRUE.")] Boolean RequireCryptographicBinding;
    [Write, Description("Specify the secondary authentication method. Possible values are: certificate, usernameAndPassword, derivedCredential. Possible values are: certificate, usernameAndPassword, derivedCredential, unknownFutureValue."), ValueMap{"certificate","usernameAndPassword","derivedCredential","unknownFutureValue"}, Values{"certificate","usernameAndPassword","derivedCredential","unknownFutureValue"}] String SecondaryAuthenticationMethod;
    [Write, Description("Specify trusted server certificate names.")] String TrustedServerCertificateNames[];
    [Write, Description("Specify root certificates for server validation. This collection can contain a maximum of 500 elements.")] String RootCertificatesForServerValidationIds[];
    [Write, Description("Specify identity certificate for client authentication.")] String IdentityCertificateForClientAuthenticationId;
    [Write, Description("Specify root certificate for client validation")] String SecondaryIdentityCertificateForClientAuthenticationId;
    [Write, Description("Specify root certificate for client validation.")] String RootCertificateForClientValidationId;
    [Write, Description("Specify secondary root certificate for client validation.")] String SecondaryRootCertificateForClientValidationId;
    [Write, Description("Admin provided description of the Device Configuration.")] String Description;
    [Key, Description("Admin provided name of the device configuration.")] String DisplayName;
    [Write, Description("The unique identifier for an entity. Read-only.")] String Id;
    [Write, Description("Represents the assignment to the Intune policy."), EmbeddedInstance("MSFT_DeviceManagementConfigurationPolicyAssignments")] String Assignments[];
    [Write, Description("Present ensures the policy exists, absent ensures it is removed."), ValueMap{"Present","Absent"}, Values{"Present","Absent"}] string Ensure;
    [Write, Description("Credentials of the Admin"), EmbeddedInstance("MSFT_Credential")] string Credential;
    [Write, Description("Id of the Azure Active Directory application to authenticate with.")] String ApplicationId;
    [Write, Description("Id of the Azure Active Directory tenant used for authentication.")] String TenantId;
    [Write, Description("Secret of the Azure Active Directory tenant used for authentication."), EmbeddedInstance("MSFT_Credential")] String ApplicationSecret;
    [Write, Description("Thumbprint of the Azure Active Directory application's authentication certificate to use for authentication.")] String CertificateThumbprint;
    [Write, Description("Managed ID being used for authentication.")] Boolean ManagedIdentity;
};
