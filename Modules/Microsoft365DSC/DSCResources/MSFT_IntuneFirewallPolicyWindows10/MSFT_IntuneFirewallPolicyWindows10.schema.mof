[ClassVersion("1.0.0.0")]
class MSFT_DeviceManagementConfigurationPolicyAssignments
{
    [Write, Description("The type of the target assignment."), ValueMap{"#microsoft.graph.groupAssignmentTarget","#microsoft.graph.allLicensedUsersAssignmentTarget","#microsoft.graph.allDevicesAssignmentTarget","#microsoft.graph.exclusionGroupAssignmentTarget","#microsoft.graph.configurationManagerCollectionAssignmentTarget"}, Values{"#microsoft.graph.groupAssignmentTarget","#microsoft.graph.allLicensedUsersAssignmentTarget","#microsoft.graph.allDevicesAssignmentTarget","#microsoft.graph.exclusionGroupAssignmentTarget","#microsoft.graph.configurationManagerCollectionAssignmentTarget"}] String dataType;
    [Write, Description("The type of filter of the target assignment i.e. Exclude or Include. Possible values are:none, include, exclude."), ValueMap{"none","include","exclude"}, Values{"none","include","exclude"}] String deviceAndAppManagementAssignmentFilterType;
    [Write, Description("The Id of the filter for the target assignment.")] String deviceAndAppManagementAssignmentFilterId;
    [Write, Description("The group Id that is the target of the assignment.")] String groupId;
    [Write, Description("The group Display Name that is the target of the assignment.")] String groupDisplayName;
    [Write, Description("The collection Id that is the target of the assignment.(ConfigMgr)")] String collectionId;
};


[ClassVersion("1.0.0.0"), FriendlyName("IntuneFirewallPolicyWindows10")]
class MSFT_IntuneFirewallPolicyWindows10 : OMI_BaseResource
{
    [Write, Description("Policy description")] String Description;
    [Key, Description("Policy name")] String DisplayName;
    [Write, Description("List of Scope Tags for this Entity instance.")] String RoleScopeTagIds[];
    [Write, Description("The unique identifier for an entity. Read-only.")] String Id;
    [Write, Description("Certificate revocation list verification (0: Disables CRL checking, 1: Specifies that CRL checking is attempted and that certificate validation fails only if the certificate is revoked. Other failures that are encountered during CRL checking (such as the revocation URL being unreachable) do not cause certificate validation to fail., 2: Means that checking is required and that certificate validation fails if any error is encountered during CRL processing)"), ValueMap{"0", "1", "2"}, Values{"0", "1", "2"}] String CRLcheck;
    [Write, Description("Disable Stateful Ftp (false: Stateful FTP enabled, true: Stateful FTP disabled)"), ValueMap{"false", "true"}, Values{"false", "true"}] String DisableStatefulFtp;
    [Write, Description("Enable Packet Queue (0: Indicates that all queuing is to be disabled, 1: Specifies that inbound encrypted packets are to be queued, 2: Specifies that packets are to be queued after decryption is performed for forwarding)"), ValueMap{"0", "1", "2"}, Values{"0", "1", "2"}] SInt32 EnablePacketQueue[];
    [Write, Description("IPsec Exceptions (0: FW_GLOBAL_CONFIG_IPSEC_EXEMPT_NONE:  No IPsec exemptions., 1: FW_GLOBAL_CONFIG_IPSEC_EXEMPT_NEIGHBOR_DISC:  Exempt neighbor discover IPv6 ICMP type-codes from IPsec., 2: FW_GLOBAL_CONFIG_IPSEC_EXEMPT_ICMP:  Exempt ICMP from IPsec., 4: FW_GLOBAL_CONFIG_IPSEC_EXEMPT_ROUTER_DISC:  Exempt router discover IPv6 ICMP type-codes from IPsec., 8: FW_GLOBAL_CONFIG_IPSEC_EXEMPT_DHCP:  Exempt both IPv4 and IPv6 DHCP traffic from IPsec.)"), ValueMap{"0", "1", "2", "4", "8"}, Values{"0", "1", "2", "4", "8"}] SInt32 IPsecExempt[];
    [Write, Description("Opportunistically Match Auth Set Per KM (false: FALSE, true: TRUE)"), ValueMap{"false", "true"}, Values{"false", "true"}] String OpportunisticallyMatchAuthSetPerKM;
    [Write, Description("Preshared Key Encoding (0: FW_GLOBAL_CONFIG_PRESHARED_KEY_ENCODING_NONE:  Preshared key is not encoded. Instead, it is kept in its wide-character format. This symbolic constant has a value of 0., 1: FW_GLOBAL_CONFIG_PRESHARED_KEY_ENCODING_UTF_8:  Encode the preshared key using UTF-8. This symbolic constant has a value of 1.)"), ValueMap{"0", "1"}, Values{"0", "1"}] String PresharedKeyEncoding;
    [Write, Description("Security association idle time")] SInt32 SaIdleTime;
    [Write, Description("Enable Domain Network Firewall (false: Disable Firewall, true: Enable Firewall)"), ValueMap{"false", "true"}, Values{"false", "true"}] String DomainProfile_EnableFirewall;
    [Write, Description("Disable Unicast Responses To Multicast Broadcast (false: Unicast Responses Not Blocked, true: Unicast Responses Blocked)"), ValueMap{"false", "true"}, Values{"false", "true"}] String DomainProfile_DisableUnicastResponsesToMulticastBroadcast;
    [Write, Description("Enable Log Ignored Rules (false: Disable Logging Of Ignored Rules, true: Enable Logging Of Ignored Rules)"), ValueMap{"false", "true"}, Values{"false", "true"}] String DomainProfile_EnableLogIgnoredRules;
    [Write, Description("Global Ports Allow User Pref Merge (false: GlobalPortsAllowUserPrefMerge Off, true: GlobalPortsAllowUserPrefMerge On)"), ValueMap{"false", "true"}, Values{"false", "true"}] String DomainProfile_GlobalPortsAllowUserPrefMerge;
    [Write, Description("Default Inbound Action for Domain Profile (0: Allow Inbound By Default, 1: Block Inbound By Default)"), ValueMap{"0", "1"}, Values{"0", "1"}] String DomainProfile_DefaultInboundAction;
    [Write, Description("Disable Stealth Mode Ipsec Secured Packet Exemption (false: FALSE, true: TRUE)"), ValueMap{"false", "true"}, Values{"false", "true"}] String DomainProfile_DisableStealthModeIpsecSecuredPacketExemption;
    [Write, Description("Allow Local Policy Merge (false: AllowLocalPolicyMerge Off, true: AllowLocalPolicyMerge On)"), ValueMap{"false", "true"}, Values{"false", "true"}] String DomainProfile_AllowLocalPolicyMerge;
    [Write, Description("Enable Log Success Connections (false: Disable Logging Of Successful Connections, true: Enable Logging Of Successful Connections)"), ValueMap{"false", "true"}, Values{"false", "true"}] String DomainProfile_EnableLogSuccessConnections;
    [Write, Description("Allow Local Ipsec Policy Merge (false: AllowLocalIpsecPolicyMerge Off, true: AllowLocalIpsecPolicyMerge On)"), ValueMap{"false", "true"}, Values{"false", "true"}] String DomainProfile_AllowLocalIpsecPolicyMerge;
    [Write, Description("Log File Path")] String DomainProfile_LogFilePath;
    [Write, Description("Disable Stealth Mode (false: Use Stealth Mode, true: Disable Stealth Mode)"), ValueMap{"false", "true"}, Values{"false", "true"}] String DomainProfile_DisableStealthMode;
    [Write, Description("Auth Apps Allow User Pref Merge (false: AuthAppsAllowUserPrefMerge Off, true: AuthAppsAllowUserPrefMerge On)"), ValueMap{"false", "true"}, Values{"false", "true"}] String DomainProfile_AuthAppsAllowUserPrefMerge;
    [Write, Description("Enable Log Dropped Packets (false: Disable Logging Of Dropped Packets, true: Enable Logging Of Dropped Packets)"), ValueMap{"false", "true"}, Values{"false", "true"}] String DomainProfile_EnableLogDroppedPackets;
    [Write, Description("Shielded (false: Shielding Off, true: Shielding On)"), ValueMap{"false", "true"}, Values{"false", "true"}] String DomainProfile_Shielded;
    [Write, Description("Default Outbound Action (0: Allow Outbound By Default, 1: Block Outbound By Default)"), ValueMap{"0", "1"}, Values{"0", "1"}] String DomainProfile_DefaultOutboundAction;
    [Write, Description("Disable Inbound Notifications (false: Firewall May Display Notification, true: Firewall Must Not Display Notification)"), ValueMap{"false", "true"}, Values{"false", "true"}] String DomainProfile_DisableInboundNotifications;
    [Write, Description("Log Max File Size")] SInt32 DomainProfile_LogMaxFileSize;
    [Write, Description("Enable Private Network Firewall (false: Disable Firewall, true: Enable Firewall)"), ValueMap{"false", "true"}, Values{"false", "true"}] String PrivateProfile_EnableFirewall;
    [Write, Description("Allow Local Ipsec Policy Merge (false: AllowLocalIpsecPolicyMerge Off, true: AllowLocalIpsecPolicyMerge On)"), ValueMap{"false", "true"}, Values{"false", "true"}] String PrivateProfile_AllowLocalIpsecPolicyMerge;
    [Write, Description("Disable Stealth Mode Ipsec Secured Packet Exemption (false: FALSE, true: TRUE)"), ValueMap{"false", "true"}, Values{"false", "true"}] String PrivateProfile_DisableStealthModeIpsecSecuredPacketExemption;
    [Write, Description("Disable Inbound Notifications (false: Firewall May Display Notification, true: Firewall Must Not Display Notification)"), ValueMap{"false", "true"}, Values{"false", "true"}] String PrivateProfile_DisableInboundNotifications;
    [Write, Description("Shielded (false: Shielding Off, true: Shielding On)"), ValueMap{"false", "true"}, Values{"false", "true"}] String PrivateProfile_Shielded;
    [Write, Description("Allow Local Policy Merge (false: AllowLocalPolicyMerge Off, true: AllowLocalPolicyMerge On)"), ValueMap{"false", "true"}, Values{"false", "true"}] String PrivateProfile_AllowLocalPolicyMerge;
    [Write, Description("Default Outbound Action (0: Allow Outbound By Default, 1: Block Outbound By Default)"), ValueMap{"0", "1"}, Values{"0", "1"}] String PrivateProfile_DefaultOutboundAction;
    [Write, Description("Auth Apps Allow User Pref Merge (false: AuthAppsAllowUserPrefMerge Off, true: AuthAppsAllowUserPrefMerge On)"), ValueMap{"false", "true"}, Values{"false", "true"}] String PrivateProfile_AuthAppsAllowUserPrefMerge;
    [Write, Description("Enable Log Ignored Rules (false: Disable Logging Of Ignored Rules, true: Enable Logging Of Ignored Rules)"), ValueMap{"false", "true"}, Values{"false", "true"}] String PrivateProfile_EnableLogIgnoredRules;
    [Write, Description("Log Max File Size")] SInt32 PrivateProfile_LogMaxFileSize;
    [Write, Description("Default Inbound Action for Private Profile (0: Allow Inbound By Default, 1: Block Inbound By Default)"), ValueMap{"0", "1"}, Values{"0", "1"}] String PrivateProfile_DefaultInboundAction;
    [Write, Description("Disable Unicast Responses To Multicast Broadcast (false: Unicast Responses Not Blocked, true: Unicast Responses Blocked)"), ValueMap{"false", "true"}, Values{"false", "true"}] String PrivateProfile_DisableUnicastResponsesToMulticastBroadcast;
    [Write, Description("Log File Path")] String PrivateProfile_LogFilePath;
    [Write, Description("Disable Stealth Mode (false: Use Stealth Mode, true: Disable Stealth Mode)"), ValueMap{"false", "true"}, Values{"false", "true"}] String PrivateProfile_DisableStealthMode;
    [Write, Description("Enable Log Success Connections (false: Disable Logging Of Successful Connections, true: Enable Logging Of Successful Connections)"), ValueMap{"false", "true"}, Values{"false", "true"}] String PrivateProfile_EnableLogSuccessConnections;
    [Write, Description("Global Ports Allow User Pref Merge (false: GlobalPortsAllowUserPrefMerge Off, true: GlobalPortsAllowUserPrefMerge On)"), ValueMap{"false", "true"}, Values{"false", "true"}] String PrivateProfile_GlobalPortsAllowUserPrefMerge;
    [Write, Description("Enable Log Dropped Packets (false: Disable Logging Of Dropped Packets, true: Enable Logging Of Dropped Packets)"), ValueMap{"false", "true"}, Values{"false", "true"}] String PrivateProfile_EnableLogDroppedPackets;
    [Write, Description("Enable Public Network Firewall (false: Disable Firewall, true: Enable Firewall)"), ValueMap{"false", "true"}, Values{"false", "true"}] String PublicProfile_EnableFirewall;
    [Write, Description("Default Outbound Action (0: Allow Outbound By Default, 1: Block Outbound By Default)"), ValueMap{"0", "1"}, Values{"0", "1"}] String PublicProfile_DefaultOutboundAction;
    [Write, Description("Disable Inbound Notifications (false: Firewall May Display Notification, true: Firewall Must Not Display Notification)"), ValueMap{"false", "true"}, Values{"false", "true"}] String PublicProfile_DisableInboundNotifications;
    [Write, Description("Disable Stealth Mode Ipsec Secured Packet Exemption (false: FALSE, true: TRUE)"), ValueMap{"false", "true"}, Values{"false", "true"}] String PublicProfile_DisableStealthModeIpsecSecuredPacketExemption;
    [Write, Description("Shielded (false: Shielding Off, true: Shielding On)"), ValueMap{"false", "true"}, Values{"false", "true"}] String PublicProfile_Shielded;
    [Write, Description("Allow Local Policy Merge (false: AllowLocalPolicyMerge Off, true: AllowLocalPolicyMerge On)"), ValueMap{"false", "true"}, Values{"false", "true"}] String PublicProfile_AllowLocalPolicyMerge;
    [Write, Description("Auth Apps Allow User Pref Merge (false: AuthAppsAllowUserPrefMerge Off, true: AuthAppsAllowUserPrefMerge On)"), ValueMap{"false", "true"}, Values{"false", "true"}] String PublicProfile_AuthAppsAllowUserPrefMerge;
    [Write, Description("Log File Path")] String PublicProfile_LogFilePath;
    [Write, Description("Default Inbound Action for Public Profile (0: Allow Inbound By Default, 1: Block Inbound By Default)"), ValueMap{"0", "1"}, Values{"0", "1"}] String PublicProfile_DefaultInboundAction;
    [Write, Description("Disable Unicast Responses To Multicast Broadcast (false: Unicast Responses Not Blocked, true: Unicast Responses Blocked)"), ValueMap{"false", "true"}, Values{"false", "true"}] String PublicProfile_DisableUnicastResponsesToMulticastBroadcast;
    [Write, Description("Global Ports Allow User Pref Merge (false: GlobalPortsAllowUserPrefMerge Off, true: GlobalPortsAllowUserPrefMerge On)"), ValueMap{"false", "true"}, Values{"false", "true"}] String PublicProfile_GlobalPortsAllowUserPrefMerge;
    [Write, Description("Enable Log Success Connections (false: Disable Logging Of Successful Connections, true: Enable Logging Of Successful Connections)"), ValueMap{"false", "true"}, Values{"false", "true"}] String PublicProfile_EnableLogSuccessConnections;
    [Write, Description("Allow Local Ipsec Policy Merge (false: AllowLocalIpsecPolicyMerge Off, true: AllowLocalIpsecPolicyMerge On)"), ValueMap{"false", "true"}, Values{"false", "true"}] String PublicProfile_AllowLocalIpsecPolicyMerge;
    [Write, Description("Enable Log Dropped Packets (false: Disable Logging Of Dropped Packets, true: Enable Logging Of Dropped Packets)"), ValueMap{"false", "true"}, Values{"false", "true"}] String PublicProfile_EnableLogDroppedPackets;
    [Write, Description("Enable Log Ignored Rules (false: Disable Logging Of Ignored Rules, true: Enable Logging Of Ignored Rules)"), ValueMap{"false", "true"}, Values{"false", "true"}] String PublicProfile_EnableLogIgnoredRules;
    [Write, Description("Log Max File Size")] SInt32 PublicProfile_LogMaxFileSize;
    [Write, Description("Disable Stealth Mode (false: Use Stealth Mode, true: Disable Stealth Mode)"), ValueMap{"false", "true"}, Values{"false", "true"}] String PublicProfile_DisableStealthMode;
    [Write, Description("Object Access Audit Filtering Platform Connection (0: Off/None, 1: Success, 2: Failure, 3: Success+Failure)"), ValueMap{"0", "1", "2", "3"}, Values{"0", "1", "2", "3"}] String ObjectAccess_AuditFilteringPlatformConnection;
    [Write, Description("Object Access Audit Filtering Platform Packet Drop (0: Off/None, 1: Success, 2: Failure, 3: Success+Failure)"), ValueMap{"0", "1", "2", "3"}, Values{"0", "1", "2", "3"}] String ObjectAccess_AuditFilteringPlatformPacketDrop;
    [Write, Description("Allowed Tls Authentication Endpoints")] String AllowedTlsAuthenticationEndpoints[];
    [Write, Description("Configured Tls Authentication Network Name")] String ConfiguredTlsAuthenticationNetworkName;
    [Write, Description("Hyper-V: Target (wsl: WSL)"), ValueMap{"wsl"}, Values{"wsl"}] String Target;
    [Write, Description("Hyper-V: Enable Domain Network Firewall (false: Disable Firewall, true: Enable Firewall)"), ValueMap{"false", "true"}, Values{"false", "true"}] String HyperVVMSettings_DomainProfile_EnableFirewall;
    [Write, Description("Hyper-V: Allow Local Policy Merge (false: AllowLocalPolicyMerge Off, true: AllowLocalPolicyMerge On)"), ValueMap{"false", "true"}, Values{"false", "true"}] String HyperVVMSettings_DomainProfile_AllowLocalPolicyMerge;
    [Write, Description("Hyper-V: Default Inbound Action (0: Allow Inbound By Default, 1: Block Inbound By Default)"), ValueMap{"0", "1"}, Values{"0", "1"}] String HyperVVMSettings_DomainProfile_DefaultInboundAction;
    [Write, Description("Hyper-V: Default Outbound Action (0: Allow Outbound By Default, 1: Block Outbound By Default)"), ValueMap{"0", "1"}, Values{"0", "1"}] String HyperVVMSettings_DomainProfile_DefaultOutboundAction;
    [Write, Description("Hyper-V: Enable Loopback (false: Disable loopback, true: Enable loopback)"), ValueMap{"false", "true"}, Values{"false", "true"}] String EnableLoopback;
    [Write, Description("Hyper-V: Enable Public Network Firewall (false: Disable Hyper-V Firewall, true: Enable Hyper-V Firewall)"), ValueMap{"false", "true"}, Values{"false", "true"}] String HyperVVMSettings_PublicProfile_EnableFirewall;
    [Write, Description("Hyper-V: Default Inbound Action (0: Allow Inbound By Default, 1: Block Inbound By Default)"), ValueMap{"0", "1"}, Values{"0", "1"}] String HyperVVMSettings_PublicProfile_DefaultInboundAction;
    [Write, Description("Hyper-V: Default Outbound Action (0: Allow Outbound By Default, 1: Block Outbound By Default)"), ValueMap{"0", "1"}, Values{"0", "1"}] String HyperVVMSettings_PublicProfile_DefaultOutboundAction;
    [Write, Description("Hyper-V: Allow Local Policy Merge (false: AllowLocalPolicyMerge Off, true: AllowLocalPolicyMerge On)"), ValueMap{"false", "true"}, Values{"false", "true"}] String HyperVVMSettings_PublicProfile_AllowLocalPolicyMerge;
    [Write, Description("Hyper-V: Enable Private Network Firewall (false: Disable Firewall, true: Enable Firewall)"), ValueMap{"false", "true"}, Values{"false", "true"}] String HyperVVMSettings_PrivateProfile_EnableFirewall;
    [Write, Description("Hyper-V: Default Outbound Action (0: Allow Outbound By Default, 1: Block Outbound By Default)"), ValueMap{"0", "1"}, Values{"0", "1"}] String HyperVVMSettings_PrivateProfile_DefaultOutboundAction;
    [Write, Description("Hyper-V: Default Inbound Action (0: Allow Inbound By Default, 1: Block Inbound By Default)"), ValueMap{"0", "1"}, Values{"0", "1"}] String HyperVVMSettings_PrivateProfile_DefaultInboundAction;
    [Write, Description("Hyper-V: Allow Local Policy Merge (false: AllowLocalPolicyMerge Off, true: AllowLocalPolicyMerge On)"), ValueMap{"false", "true"}, Values{"false", "true"}] String HyperVVMSettings_PrivateProfile_AllowLocalPolicyMerge;
    [Write, Description("Hyper-V: Allow Host Policy Merge (false: AllowHostPolicyMerge Off, true: AllowHostPolicyMerge On)"), ValueMap{"false", "true"}, Values{"false", "true"}] String AllowHostPolicyMerge;
    [Write, Description("Represents the assignment to the Intune policy."), EmbeddedInstance("MSFT_DeviceManagementConfigurationPolicyAssignments")] String Assignments[];
    [Write, Description("Present ensures the policy exists, absent ensures it is removed."), ValueMap{"Present","Absent"}, Values{"Present","Absent"}] string Ensure;
    [Write, Description("Credentials of the Admin"), EmbeddedInstance("MSFT_Credential")] string Credential;
    [Write, Description("Id of the Azure Active Directory application to authenticate with.")] String ApplicationId;
    [Write, Description("Id of the Azure Active Directory tenant used for authentication.")] String TenantId;
    [Write, Description("Secret of the Azure Active Directory tenant used for authentication."), EmbeddedInstance("MSFT_Credential")] String ApplicationSecret;
    [Write, Description("Thumbprint of the Azure Active Directory application's authentication certificate to use for authentication.")] String CertificateThumbprint;
    [Write, Description("Managed ID being used for authentication.")] Boolean ManagedIdentity;
    [Write, Description("Access token used for authentication.")] String AccessTokens[];
};
