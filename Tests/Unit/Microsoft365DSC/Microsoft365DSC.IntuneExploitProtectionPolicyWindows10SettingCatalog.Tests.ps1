[CmdletBinding()]
param(
)
$M365DSCTestFolder = Join-Path -Path $PSScriptRoot `
    -ChildPath '..\..\Unit' `
    -Resolve
$CmdletModule = (Join-Path -Path $M365DSCTestFolder `
        -ChildPath '\Stubs\Microsoft365.psm1' `
        -Resolve)
$GenericStubPath = (Join-Path -Path $M365DSCTestFolder `
        -ChildPath '\Stubs\Generic.psm1' `
        -Resolve)
Import-Module -Name (Join-Path -Path $M365DSCTestFolder `
        -ChildPath '\UnitTestHelper.psm1' `
        -Resolve)

$Global:DscHelper = New-M365DscUnitTestHelper -StubModule $CmdletModule `
    -DscResource 'IntuneExploitProtectionPolicyWindows10SettingCatalog' -GenericStubModule $GenericStubPath

Describe -Name $Global:DscHelper.DescribeHeader -Fixture {
    InModuleScope -ModuleName $Global:DscHelper.ModuleName -ScriptBlock {
        Invoke-Command -ScriptBlock $Global:DscHelper.InitializeScript -NoNewScope

        BeforeAll {
            $secpasswd = ConvertTo-SecureString ((New-Guid).ToString()) -AsPlainText -Force
            $Credential = New-Object System.Management.Automation.PSCredential ('tenantadmin@mydomain.com', $secpasswd)

            Mock -CommandName Confirm-M365DSCDependencies -MockWith {
            }

            Mock -CommandName New-M365DSCConnection -MockWith {
                return 'Credentials'
            }

            Mock -CommandName Get-MgBetaDeviceManagementConfigurationPolicy -MockWith {
            }

            Mock -CommandName New-MgBetaDeviceManagementConfigurationPolicy -MockWith {
                return @{
                    Id = '619bd4a4-3b3b-4441-bd6f-3f4c0c444870'
                }
            }

            Mock -CommandName Update-IntuneDeviceConfigurationPolicy -MockWith {
            }

            Mock -CommandName Get-IntuneSettingCatalogPolicySetting -MockWith {
            }

            Mock -CommandName Remove-MgBetaDeviceManagementConfigurationPolicy -MockWith {
            }

            Mock -CommandName Get-MgBetaDeviceManagementConfigurationPolicyAssignment -MockWith {
                return @{
                    Id       = '12345-12345-12345-12345-12345'
                    Source   = 'direct'
                    SourceId = '12345-12345-12345-12345-12345'
                    Target   = @{
                        DeviceAndAppManagementAssignmentFilterId   = '12345-12345-12345-12345-12345'
                        DeviceAndAppManagementAssignmentFilterType = 'none'
                        AdditionalProperties                       = @(
                            @{
                                '@odata.type' = '#microsoft.graph.exclusionGroupAssignmentTarget'
                                groupId       = '26d60dd1-fab6-47bf-8656-358194c1a49d'
                            }
                        )
                    }
                }
            }

            Mock -CommandName Get-MgBetaDeviceManagementConfigurationPolicySetting -MockWith {
                return ,@()
            }

            Mock -CommandName Update-DeviceConfigurationPolicyAssignment -MockWith {
            }
            # Mock Write-Host to hide output during the tests
            Mock -CommandName Write-Host -MockWith {
            }
            $Script:exportedInstances =$null
            $Script:ExportMode = $false
        }

        # Test contexts
        Context -Name "When the instance doesn't already exist" -Fixture {
            BeforeAll {
                $testParams = @{
                    Credential                        = $Credential
                    Description                       = 'Test description'
                    DisallowExploitProtectionOverride = '1'
                    DisplayName                       = 'Test Exploit Protection'
                    Ensure                            = 'Present'
                    Identity                          = '36002266-8153-48e3-9716-d4546ae34ff7'
                    Assignments                       = @(
                        (New-CimInstance -ClassName MSFT_DeviceManagementConfigurationPolicyAssignments -Property @{
                            DataType                                   = '#microsoft.graph.exclusionGroupAssignmentTarget'
                            DeviceAndAppManagementAssignmentFilterType = 'none'
                            DeviceAndAppManagementAssignmentFilterId   = '12345-12345-12345-12345-12345'
                            GroupId                                    = '26d60dd1-fab6-47bf-8656-358194c1a49d'
                        } -ClientOnly)
                    )
                }

                Mock -CommandName Get-MgBetaDeviceManagementConfigurationPolicy -MockWith {
                    return $null
                }
            }

            It 'Should return absent from the Get method' {
                (Get-TargetResource @testParams).Ensure | Should -Be 'Absent'
            }

            It 'Should return false from the Test method' {
                Test-TargetResource @testParams | Should -Be $false
            }

            It 'Should create the category from the Set method' {
                Set-TargetResource @testParams
                Should -Invoke -CommandName New-MgBetaDeviceManagementConfigurationPolicy -Exactly 1
            }
        }

        Context -Name 'When the policy already exists and is NOT in the Desired State' -Fixture {
            BeforeAll {
                $testParams = @{
                    Credential                        = $Credential
                    Description                       = 'My Test'
                    disallowexploitprotectionoverride = '1'
                    DisplayName                       = 'Test Exploit Protection'
                    Ensure                            = 'Present'
                    Identity                          = '36002266-8153-48e3-9716-d4546ae34ff7'
                    Assignments                       = @(
                        (New-CimInstance -ClassName MSFT_DeviceManagementConfigurationPolicyAssignments -Property @{
                            DataType                                   = '#microsoft.graph.exclusionGroupAssignmentTarget'
                            DeviceAndAppManagementAssignmentFilterType = 'none'
                            DeviceAndAppManagementAssignmentFilterId   = '12345-12345-12345-12345-12345'
                            GroupId                                    = '26d60dd1-fab6-47bf-8656-358194c1a49d'
                        } -ClientOnly)
                    )
                }

                Mock -CommandName Get-MgBetaDeviceManagementConfigurationPolicy -MockWith {
                    return @{
                        Id          = '12345-12345-12345-12345-12345'
                        Description = 'My Test'
                        Name        = 'Test Exploit Protection'
                    }
                }

                Mock -CommandName Get-MgBetaDeviceManagementConfigurationPolicySetting -MockWith {
                    return @{
                        Id                   = 0
                        SettingDefinitions   = @(
                            @{
                                Id = 'device_vendor_msft_policy_config_windowsdefendersecuritycenter_disallowexploitprotectionoverride'
                                Name = 'DisallowExploitProtectionOverride'
                                AdditionalProperties = @{
                                    '@odata.type' = '#microsoft.graph.deviceManagementConfigurationChoiceSettingDefinition'
                                }
                            }
                        )
                        SettingInstance      = @(
                            @{
                                SettingDefinitionId              = 'device_vendor_msft_policy_config_windowsdefendersecuritycenter_disallowexploitprotectionoverride'
                                SettingInstanceTemplateReference = @{
                                    SettingInstanceTemplateId = 'e4be83c7-691b-488d-b068-2d82a1cced8e'
                                }
                                AdditionalProperties             = @(
                                    @{
                                        '@odata.type'      = '#microsoft.graph.deviceManagementConfigurationChoiceSettingInstance'
                                        choiceSettingValue = @{
                                            value = 'device_vendor_msft_policy_config_windowsdefendersecuritycenter_disallowexploitprotectionoverride_0' #drift
                                            children = @()
                                        }
                                    }
                                )
                            }
                        )
                        AdditionalProperties = $null
                    }
                }
            }

            It 'Should return Present from the Get method' {
                (Get-TargetResource @testParams).Ensure | Should -Be 'Present'
            }

            It 'Should return false from the Test method' {
                Test-TargetResource @testParams | Should -Be $false
            }

            It 'Should update the category from the Set method' {
                Set-TargetResource @testParams
                Should -Invoke -CommandName Update-IntuneDeviceConfigurationPolicy -Exactly 1
            }
        }

        Context -Name 'When the policy already exists and IS in the Desired State' -Fixture {
            BeforeAll {
                $testParams = @{
                    Credential                        = $Credential
                    Description                       = 'My Test'
                    disallowexploitprotectionoverride = '1'
                    DisplayName                       = 'Test Exploit Protection'
                    Ensure                            = 'Present'
                    Identity                          = '12345-12345-12345-12345-12345'
                    Assignments                       = @(
                        (New-CimInstance -ClassName MSFT_DeviceManagementConfigurationPolicyAssignments -Property @{
                            DataType                                   = '#microsoft.graph.exclusionGroupAssignmentTarget'
                            DeviceAndAppManagementAssignmentFilterType = 'none'
                            DeviceAndAppManagementAssignmentFilterId   = '12345-12345-12345-12345-12345'
                            GroupId                                    = '26d60dd1-fab6-47bf-8656-358194c1a49d'
                        } -ClientOnly)
                    )
                }

                Mock -CommandName Get-MgBetaDeviceManagementConfigurationPolicy -MockWith {
                    return @{
                        Id          = '12345-12345-12345-12345-12345'
                        Description = 'My Test'
                        Name        = 'Test Exploit Protection'
                    }
                }
                Mock -CommandName Get-MgBetaDeviceManagementConfigurationPolicyAssignment -MockWith {
                    return @(
                        @{
                            Target = @{
                                AdditionalProperties                       = @{
                                    '@odata.type' = '#microsoft.graph.exclusionGroupAssignmentTarget'
                                    groupId       = '26d60dd1-fab6-47bf-8656-358194c1a49d'
                                }
                                DeviceAndAppManagementAssignmentFilterType = 'none'
                                DeviceAndAppManagementAssignmentFilterId   = '12345-12345-12345-12345-12345'
                            }
                        }
                    )
                }

                Mock -CommandName Get-MgBetaDeviceManagementConfigurationPolicySetting -MockWith {
                    return @{
                        Id                   = 0
                        SettingDefinitions   = @(
                            @{
                                Id = 'device_vendor_msft_policy_config_windowsdefendersecuritycenter_disallowexploitprotectionoverride'
                                Name = 'DisallowExploitProtectionOverride'
                                AdditionalProperties = @{
                                    '@odata.type' = '#microsoft.graph.deviceManagementConfigurationChoiceSettingDefinition'
                                }
                            }
                        )
                        SettingInstance      = @(
                            @{
                                SettingDefinitionId              = 'device_vendor_msft_policy_config_windowsdefendersecuritycenter_disallowexploitprotectionoverride'
                                SettingInstanceTemplateReference = @{
                                    SettingInstanceTemplateId = 'e4be83c7-691b-488d-b068-2d82a1cced8e'
                                }
                                AdditionalProperties             = @(
                                    @{
                                        '@odata.type'      = '#microsoft.graph.deviceManagementConfigurationChoiceSettingInstance'
                                        choiceSettingValue = @{
                                            value = 'device_vendor_msft_policy_config_windowsdefendersecuritycenter_disallowexploitprotectionoverride_1'
                                            children = @()
                                        }
                                    }
                                )
                            }
                        )
                        AdditionalProperties = @{}
                    }
                }
            }

            It 'Should return true from the Test method' {
                Test-TargetResource @testParams | Should -Be $true
            }
        }

        Context -Name 'When the policy exists and it SHOULD NOT' -Fixture {
            BeforeAll {
                $testParams = @{
                    Credential                        = $Credential
                    Description                       = 'My Test'
                    disallowexploitprotectionoverride = '1'
                    DisplayName                       = 'Test Exploit Protection'
                    Ensure                            = 'Absent'
                    Identity                          = '36002266-8153-48e3-9716-d4546ae34ff7'
                    Assignments                       = @(
                        (New-CimInstance -ClassName MSFT_DeviceManagementConfigurationPolicyAssignments -Property @{
                            DataType                                   = '#microsoft.graph.exclusionGroupAssignmentTarget'
                            DeviceAndAppManagementAssignmentFilterType = 'none'
                            DeviceAndAppManagementAssignmentFilterId   = '12345-12345-12345-12345-12345'
                            GroupId                                    = '26d60dd1-fab6-47bf-8656-358194c1a49d'
                        } -ClientOnly)
                    )
                }

                Mock -CommandName Get-MgBetaDeviceManagementConfigurationPolicy -MockWith {
                    return @{
                        Id          = '12345-12345-12345-12345-12345'
                        Description = 'My Test'
                        Name        = 'Test Exploit Protection'
                    }
                }

                Mock -CommandName Get-MgBetaDeviceManagementConfigurationPolicySetting -MockWith {
                    return @{
                        Id                   = 0
                        SettingDefinitions   = @(
                            @{
                                Id = 'device_vendor_msft_policy_config_windowsdefendersecuritycenter_disallowexploitprotectionoverride'
                                Name = 'DisallowExploitProtectionOverride'
                                AdditionalProperties = @{
                                    '@odata.type' = '#microsoft.graph.deviceManagementConfigurationChoiceSettingDefinition'
                                }
                            }
                        )
                        SettingInstance      = @(
                            @{
                                SettingDefinitionId              = 'device_vendor_msft_policy_config_windowsdefendersecuritycenter_disallowexploitprotectionoverride'
                                SettingInstanceTemplateReference = @{
                                    SettingInstanceTemplateId = 'e4be83c7-691b-488d-b068-2d82a1cced8e'
                                }
                                AdditionalProperties             = @(
                                    @{
                                        '@odata.type'      = '#microsoft.graph.deviceManagementConfigurationChoiceSettingInstance'
                                        choiceSettingValue = @{
                                            value = 'device_vendor_msft_policy_config_windowsdefendersecuritycenter_disallowexploitprotectionoverride_1'
                                            children = @()
                                        }
                                    }
                                )
                            }
                        )
                        AdditionalProperties = @{}
                    }
                }
            }

            It 'Should return Present from the Get method' {
                (Get-TargetResource @testParams).Ensure | Should -Be 'Present'
            }

            It 'Should return true from the Test method' {
                Test-TargetResource @testParams | Should -Be $false
            }

            It 'Should remove the category from the Set method' {
                Set-TargetResource @testParams
                Should -Invoke -CommandName Remove-MgBetaDeviceManagementConfigurationPolicy -Exactly 1
            }
        }

        Context -Name 'ReverseDSC Tests' -Fixture {
            BeforeAll {
                $Global:CurrentModeIsExport = $true
                $Global:PartialExportFileName = "$(New-Guid).partial.ps1"
                $testParams = @{
                    Credential = $Credential
                }

                Mock -CommandName Get-MgBetaDeviceManagementConfigurationPolicy -MockWith {
                    return @(
                        @{
                            Id          = '12345-12345-12345-12345-12345'
                            Description = 'My Test'
                            Name        = 'Test Exploit Protection'
                            TemplateReference = @{
                                TemplateId = 'd02f2162-fcac-48db-9b7b-b0a3f160d2c2_1'
                            }
                        }
                    )
                }

                Mock -CommandName Get-MgBetaDeviceManagementConfigurationPolicySetting -MockWith {
                    return @{
                        Id                   = 0
                        SettingDefinitions   = @(
                            @{
                                Id = 'device_vendor_msft_policy_config_windowsdefendersecuritycenter_disallowexploitprotectionoverride'
                                Name = 'DisallowExploitProtectionOverride'
                                AdditionalProperties = @{
                                    '@odata.type' = '#microsoft.graph.deviceManagementConfigurationChoiceSettingDefinition'
                                }
                            }
                        )
                        SettingInstance      = @(
                            @{
                                SettingDefinitionId              = 'device_vendor_msft_policy_config_windowsdefendersecuritycenter_disallowexploitprotectionoverride'
                                SettingInstanceTemplateReference = @{
                                    SettingInstanceTemplateId = 'e4be83c7-691b-488d-b068-2d82a1cced8e'
                                }
                                AdditionalProperties             = @(
                                    @{
                                        '@odata.type'      = '#microsoft.graph.deviceManagementConfigurationChoiceSettingInstance'
                                        choiceSettingValue = @{
                                            value = 'device_vendor_msft_policy_config_windowsdefendersecuritycenter_disallowexploitprotectionoverride_1'
                                            children = @()
                                        }
                                    }
                                )
                            }
                        )
                        AdditionalProperties = @{}
                    }
                }
            }

            It 'Should Reverse Engineer resource from the Export method' {
                $result = Export-TargetResource @testParams
                $result | Should -Not -BeNullOrEmpty
            }
        }
    }
}

Invoke-Command -ScriptBlock $Global:DscHelper.CleanupScript -NoNewScope
